// server/services/agents/booking-agent.ts
// ‚úÖ PHASE 1 INTEGRATION COMPLETE:
// 1. Added Claude primary + OpenAI fallback system (matching other files)
// 2. Unified translation service pattern
// 3. Enhanced Maya integration with context preservation
// 4. Improved system prompts with immediate action rules

import OpenAI from 'openai';
import Anthropic from '@anthropic-ai/sdk';
import type { Language } from '../enhanced-conversation-manager';
import { agentTools } from './agent-tools';
import { DateTime } from 'luxon';

// ‚úÖ PHASE 1 FIX: Initialize both AI clients for fallback system
const openaiClient = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY
});

const claude = new Anthropic({
    apiKey: process.env.ANTHROPIC_API_KEY!
});

/**
 * ‚úÖ PHASE 1 FIX: Unified Translation Service (matching other files)
 */
class UnifiedTranslationService {
    private static cache = new Map<string, { translation: string, timestamp: number }>();
    private static CACHE_TTL = 60 * 60 * 1000; // 1 hour
    
    static async translate(
        text: string,
        targetLanguage: Language,
        context: 'greeting' | 'error' | 'info' | 'question' = 'info'
    ): Promise<string> {
        if (targetLanguage === 'en' || targetLanguage === 'auto') return text;
        
        // Check cache first
        const cacheKey = `${text}:${targetLanguage}:${context}`;
        const cached = this.cache.get(cacheKey);
        if (cached && Date.now() - cached.timestamp < this.CACHE_TTL) {
            return cached.translation;
        }
        
        try {
            const translation = await this.translateWithFallback(text, targetLanguage, context);
            
            // Cache the result
            this.cache.set(cacheKey, { translation, timestamp: Date.now() });
            
            return translation;
        } catch (error) {
            console.error('[UnifiedTranslation] Error:', error);
            return text; // Fallback to original
        }
    }
    
    /**
     * ‚úÖ PHASE 1 FIX: AI abstraction layer with Claude primary + OpenAI fallback
     */
    private static async translateWithFallback(
        text: string,
        targetLanguage: Language,
        context: string
    ): Promise<string> {
        const languageNames: Record<Language, string> = {
            'en': 'English', 'ru': 'Russian', 'sr': 'Serbian', 'hu': 'Hungarian',
            'de': 'German', 'fr': 'French', 'es': 'Spanish', 'it': 'Italian',
            'pt': 'Portuguese', 'nl': 'Dutch', 'auto': 'English'
        };
        
        const prompt = `Translate this restaurant ${context} message to ${languageNames[targetLanguage]}:

"${text}"

Keep the same tone and professional style.
Return only the translation, no explanations.`;

        // ‚úÖ PRIMARY: Claude Haiku for fast translation
        try {
            const result = await claude.messages.create({
                model: "claude-3-haiku-20240307",
                max_tokens: 300,
                temperature: 0.2,
                messages: [{ role: 'user', content: prompt }]
            });

            const response = result.content[0];
            if (response.type === 'text') {
                return response.text;
            }
            throw new Error("Non-text response from Claude");

        } catch (claudeError: any) {
            console.warn(`[Translation] Claude failed, using OpenAI fallback: ${claudeError.message}`);

            // ‚úÖ FALLBACK: OpenAI
            try {
                const completion = await openaiClient.chat.completions.create({
                    model: "gpt-4o-mini",
                    messages: [{ role: 'user', content: prompt }],
                    max_tokens: 300,
                    temperature: 0.2
                });
                
                return completion.choices[0]?.message?.content?.trim() || text;
                
            } catch (openaiError: any) {
                console.error(`[Translation] Both Claude and OpenAI failed: ${openaiError.message}`);
                return text; // Final fallback to original
            }
        }
    }
    
    // Clean expired cache entries periodically
    static cleanCache(): void {
        const now = Date.now();
        for (const [key, value] of this.cache.entries()) {
            if (now - value.timestamp > this.CACHE_TTL) {
                this.cache.delete(key);
            }
        }
    }
}

/**
 * ‚úÖ NEW: Guest history interface for personalized interactions
 */
interface GuestHistory {
    guest_name: string;
    guest_phone: string; // ‚úÖ PHASE 1 FIX: Include phone
    total_bookings: number;
    total_cancellations: number;
    last_visit_date: string | null;
    common_party_size: number | null;
    frequent_special_requests: string[];
    retrieved_at: string;
}

/**
 * ‚úÖ CRITICAL FIX: Enhanced conversation context interface
 */
interface ConversationContext {
    isReturnVisit: boolean;
    hasAskedPartySize: boolean;
    bookingNumber: number; // 1st, 2nd booking in session
    isSubsequentBooking: boolean;
    sessionTurnCount: number;
    lastQuestions: string[]; // Track last few questions to avoid repetition
}

/**
 * ‚úÖ CRITICAL FIX: Enhanced personalized greeting generation with context awareness
 */
function generatePersonalizedGreeting(
    guestHistory: GuestHistory | null,
    language: Language,
    context: 'hostess' | 'guest',
    conversationContext?: ConversationContext
): string {
    // Get current date context
    const getCurrentRestaurantContext = () => {
        try {
            const now = DateTime.now();
            const today = now.toISODate();
            const currentTime = now.toFormat('HH:mm');
            const dayOfWeek = now.toFormat('cccc');

            return {
                currentDate: today,
                currentTime: currentTime,
                dayOfWeek: dayOfWeek
            };
        } catch (error) {
            console.error(`[BookingAgent] Error getting time context:`, error);
            const now = DateTime.now();
            return {
                currentDate: now.toISODate(),
                currentTime: now.toFormat('HH:mm'),
                dayOfWeek: now.toFormat('cccc')
            };
        }
    };

    const dateContext = getCurrentRestaurantContext();

    // ‚úÖ CRITICAL FIX: Handle subsequent bookings differently
    if (conversationContext?.isSubsequentBooking) {
        if (!guestHistory || guestHistory.total_bookings === 0) {
            // Simple greeting for subsequent booking by new guest
            const subsequentGreetings = {
                en: `Perfect! I can help you with another reservation. What date and time would you like?`,
                ru: `–û—Ç–ª–∏—á–Ω–æ! –ü–æ–º–æ–≥—É –≤–∞–º —Å –µ—â—ë –æ–¥–Ω–æ–π –±—Ä–æ–Ω—å—é. –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è?`,
                sr: `Odliƒçno! Mogu da vam pomognem sa jo≈° jednom rezervacijom. Koji datum i vreme ≈æelite?`,
                hu: `T√∂k√©letes! Seg√≠thetek egy m√°sik foglal√°ssal. Milyen d√°tumra √©s id≈ëpontra?`,
                de: `Perfekt! Ich kann Ihnen bei einer weiteren Reservierung helfen. Welches Datum und welche Uhrzeit h√§tten Sie gern?`,
                fr: `Parfait! Je peux vous aider avec une autre r√©servation. Quelle date et quelle heure souhaitez-vous?`,
                es: `¬°Perfecto! Puedo ayudarte con otra reserva. ¬øQu√© fecha y hora te gustar√≠a?`,
                it: `Perfetto! Posso aiutarti con un'altra prenotazione. Che data e ora vorresti?`,
                pt: `Perfeito! Posso ajud√°-lo com outra reserva. Que data e hora gostaria?`,
                nl: `Perfect! Ik kan je helpen met nog een reservering. Welke datum en tijd zou je willen?`,
                auto: `Perfect! I can help you with another reservation. What date and time would you like?`
            };
            return subsequentGreetings[language] || subsequentGreetings.en;
        } else {
            // Subsequent booking for returning guest - be more conversational
            const subsequentGreetings = {
                en: `Of course! I'd be happy to help with another reservation. When would you like to dine again?`,
                ru: `–ö–æ–Ω–µ—á–Ω–æ! –ë—É–¥—É —Ä–∞–¥–∞ –ø–æ–º–æ—á—å —Å –µ—â—ë –æ–¥–Ω–æ–π –±—Ä–æ–Ω—å—é. –ö–æ–≥–¥–∞ —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–Ω–æ–≤–∞ –ø–æ—É–∂–∏–Ω–∞—Ç—å?`,
                sr: `Naravno! Rado ƒáu vam pomoƒái sa jo≈° jednom rezervacijom. Kada biste ≈æeleli da veƒçerate ponovo?`,
                hu: `Term√©szetesen! Sz√≠vesen seg√≠tek egy m√°sik foglal√°ssal. Mikor szeretn√©l √∫jra vacsor√°zni?`,
                de: `Nat√ºrlich! Gerne helfe ich Ihnen bei einer weiteren Reservierung. Wann m√∂chten Sie wieder speisen?`,
                fr: `Bien s√ªr! Je serais ravie de vous aider avec une autre r√©servation. Quand aimeriez-vous d√Æner √† nouveau?`,
                es: `¬°Por supuesto! Estar√© encantada de ayudarte con otra reserva. ¬øCu√°ndo te gustar√≠a cenar de nuevo?`,
                it: `Certo! Sar√≤ felice di aiutarti con un'altra prenotazione. Quando vorresti cenare di nuovo?`,
                pt: `Claro! Ficaria feliz em ajudar com outra reserva. Quando gostaria de jantar novamente?`,
                nl: `Natuurlijk! Ik help je graag met nog een reservering. Wanneer zou je weer willen dineren?`,
                auto: `Of course! I'd be happy to help with another reservation. When would you like to dine again?`
            };
            return subsequentGreetings[language] || subsequentGreetings.en;
        }
    }

    if (!guestHistory || guestHistory.total_bookings === 0) {
        // Regular greeting for new guests
        if (context === 'hostess') {
            const greetings = {
                en: `üåü Hi! I'm Sofia, your booking assistant. Today is ${dateContext.currentDate}. I help with reservations step-by-step: check availability first, then collect all details, then create the booking.`,
                ru: `üåü –ü—Ä–∏–≤–µ—Ç! –Ø –°–æ—Ñ–∏—è, –≤–∞—à–∞ –ø–æ–º–æ—â–Ω–∏—Ü–∞ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. –°–µ–≥–æ–¥–Ω—è ${dateContext.currentDate}. –ü–æ–º–æ–≥–∞—é –ø–æ—à–∞–≥–æ–≤–æ: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, –ø–æ—Ç–æ–º —Å–æ–±–∏—Ä–∞—é –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—é –±—Ä–æ–Ω—å.`,
                sr: `üåü Zdravo! Ja sam Sofija, asistent za rezervacije. Danas je ${dateContext.currentDate}. Poma≈æem korak po korak: prvo proverim dostupnost, zatim sakupim sve podatke, pa napravim rezervaciju.`,
                hu: `üåü Szia! √ân Sz√≥fia vagyok, a foglal√°si asszisztensed. Ma ${dateContext.currentDate} van. L√©p√©sr≈ël l√©p√©sre seg√≠tek: el≈ësz√∂r ellen≈ërz√∂m az el√©rhet≈ës√©get, azt√°n √∂sszegy≈±jt√∂m az adatokat, majd l√©trehozom a foglal√°st.`,
                de: `üåü Hallo! Ich bin Sofia, Ihre Buchungsassistentin. Heute ist der ${dateContext.currentDate}. Ich helfe Schritt f√ºr Schritt: erst Verf√ºgbarkeit pr√ºfen, dann Details sammeln, dann Buchung erstellen.`,
                fr: `üåü Bonjour! Je suis Sofia, votre assistante de r√©servation. Nous sommes le ${dateContext.currentDate}. J'aide √©tape par √©tape: d'abord v√©rifier la disponibilit√©, puis collecter les d√©tails, puis cr√©er la r√©servation.`,
                es: `üåü ¬°Hola! Soy Sofia, tu asistente de reservas. Hoy es ${dateContext.currentDate}. Ayudo paso a paso: primero verifico disponibilidad, luego recopilo detalles, luego creo la reserva.`,
                it: `üåü Ciao! Sono Sofia, la tua assistente per le prenotazioni. Oggi √® ${dateContext.currentDate}. Aiuto passo dopo passo: prima controllo la disponibilit√†, poi raccolgo i dettagli, poi creo la prenotazione.`,
                pt: `üåü Ol√°! Eu sou Sofia, sua assistente de reservas. Hoje √© ${dateContext.currentDate}. Ajudo passo a passo: primeiro verifico disponibilidade, depois coletamos detalhes, depois criamos a reserva.`,
                nl: `üåü Hallo! Ik ben Sofia, je boekingsassistent. Vandaag is ${dateContext.currentDate}. Ik help stap voor stap: eerst beschikbaarheid controleren, dan details verzamelen, dan boeking maken.`,
                auto: `üåü Hi! I'm Sofia, your booking assistant. Today is ${dateContext.currentDate}. I help with reservations step-by-step: check availability first, then collect all details, then create the booking.`
            };
            return greetings[language] || greetings.en;
        } else {
            // ‚úÖ FIX: More general and welcoming initial greeting.
            const greetings = {
                en: `üåü Hello! I'm Sofia. How can I help you today?`,
                ru: `üåü –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –°–æ—Ñ–∏—è. –ß–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?`,
                sr: `üåü Zdravo! Ja sam Sofija. Kako Vam mogu pomoƒái danas?`,
                hu: `üåü Szia! √ân Sz√≥fia vagyok. Hogyan seg√≠thetek ma?`,
                de: `üåü Hallo! Ich bin Sofia. Wie kann ich Ihnen heute helfen?`,
                fr: `üåü Bonjour! Je suis Sofia. Comment puis-je vous aider aujourd'hui?`,
                es: `üåü ¬°Hola! Soy Sofia. ¬øC√≥mo puedo ayudarte hoy?`,
                it: `üåü Ciao! Sono Sofia. Come posso aiutarti oggi?`,
                pt: `üåü Ol√°! Eu sou Sofia. Como posso ajud√°-lo hoje?`,
                nl: `üåü Hallo! Ik ben Sofia. Hoe kan ik je vandaag helpen?`,
                auto: `üåü Hello! I'm Sofia. How can I help you today?`
            };
            return greetings[language] || greetings.en;
        }
    }

    // ‚úÖ NEW: Personalized greeting for returning guests
    const { guest_name, total_bookings, common_party_size, frequent_special_requests, last_visit_date } = guestHistory;
    const isReturningRegular = total_bookings >= 3;

    if (context === 'hostess') {
        // Staff context - efficient and informative
        const greetings = {
            en: `üåü Hi! Sofia here. Today is ${dateContext.currentDate}. ${isReturningRegular ? `This is ${guest_name} - returning guest with ${total_bookings} previous bookings.` : `This is ${guest_name} - they've visited ${total_bookings} time${total_bookings > 1 ? 's' : ''} before.`}${common_party_size ? ` Usual party: ${common_party_size}` : ''}${frequent_special_requests.length > 0 ? `. Usual requests: ${frequent_special_requests.join(', ')}` : ''}`,
            ru: `üåü –ü—Ä–∏–≤–µ—Ç! –°–æ—Ñ–∏—è –∑–¥–µ—Å—å. –°–µ–≥–æ–¥–Ω—è ${dateContext.currentDate}. ${isReturningRegular ? `–≠—Ç–æ ${guest_name} - –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –≥–æ—Å—Ç—å —Å ${total_bookings} –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏.` : `–≠—Ç–æ ${guest_name} - –æ–Ω–∏ –ø–æ—Å–µ—â–∞–ª–∏ –Ω–∞—Å ${total_bookings} —Ä–∞–∑${total_bookings > 1 ? '–∞' : ''}.`}${common_party_size ? ` –û–±—ã—á–Ω–æ: ${common_party_size} —á–µ–ª.` : ''}${frequent_special_requests.length > 0 ? `. –û–±—ã—á–Ω—ã–µ –ø—Ä–æ—Å—å–±—ã: ${frequent_special_requests.join(', ')}` : ''}`,
            sr: `üåü Zdravo! Sofija ovde. Danas je ${dateContext.currentDate}. ${isReturningRegular ? `Ovo je ${guest_name} - stalni gost sa ${total_bookings} prethodnih rezervacija.` : `Ovo je ${guest_name} - posetili su nas ${total_bookings} put${total_bookings > 1 ? 'a' : ''}.`}${common_party_size ? ` Obiƒçno: ${common_party_size} os.` : ''}${frequent_special_requests.length > 0 ? `. Uobiƒçajeni zahtevi: ${frequent_special_requests.join(', ')}` : ''}`,
            hu: `üåü Szia! Sz√≥fia itt. Ma ${dateContext.currentDate} van. ${isReturningRegular ? `Ez ${guest_name} - visszat√©r≈ë vend√©g ${total_bookings} kor√°bbi foglal√°ssal.` : `Ez ${guest_name} - ${total_bookings} alkalommal j√°rt${total_bookings > 1 ? 'ak' : ''} n√°lunk.`}${common_party_size ? ` Szok√°sos l√©tsz√°m: ${common_party_size} f≈ë` : ''}${frequent_special_requests.length > 0 ? `. Szok√°sos k√©r√©sek: ${frequent_special_requests.join(', ')}` : ''}`,
            de: `üåü Hallo! Sofia hier. Heute ist ${dateContext.currentDate}. ${isReturningRegular ? `Das ist ${guest_name} - Stammgast mit ${total_bookings} vorherigen Buchungen.` : `Das ist ${guest_name} - war schon ${total_bookings} Mal${total_bookings > 1 ? 'e' : ''} hier.`}${common_party_size ? ` √úblich: ${common_party_size} Pers.` : ''}${frequent_special_requests.length > 0 ? `. √úbliche W√ºnsche: ${frequent_special_requests.join(', ')}` : ''}`,
            fr: `üåü Bonjour! Sofia ici. Nous sommes le ${dateContext.currentDate}. ${isReturningRegular ? `C'est ${guest_name} - client r√©gulier avec ${total_bookings} r√©servations pr√©c√©dentes.` : `C'est ${guest_name} - a visit√© ${total_bookings} fois${total_bookings > 1 ? '' : ''}.`}${common_party_size ? ` Habituel: ${common_party_size} pers.` : ''}${frequent_special_requests.length > 0 ? `. Demandes habituelles: ${frequent_special_requests.join(', ')}` : ''}`,
            es: `üåü ¬°Hola! Sofia aqu√≠. Hoy es ${dateContext.currentDate}. ${isReturningRegular ? `Este es ${guest_name} - cliente habitual con ${total_bookings} reservas previas.` : `Este es ${guest_name} - ha visitado ${total_bookings} vez${total_bookings > 1 ? 'es' : ''}.`}${common_party_size ? ` Usual: ${common_party_size} pers.` : ''}${frequent_special_requests.length > 0 ? `. Solicitudes habituales: ${frequent_special_requests.join(', ')}` : ''}`,
            it: `üåü Ciao! Sofia qui. Oggi √® ${dateContext.currentDate}. ${isReturningRegular ? `Questo √® ${guest_name} - ospite abituale con ${total_bookings} prenotazioni precedenti.` : `Questo √® ${guest_name} - ha visitato ${total_bookings} volta${total_bookings > 1 ? 'e' : ''}.`}${common_party_size ? ` Solito: ${common_party_size} pers.` : ''}${frequent_special_requests.length > 0 ? `. Richieste abituali: ${frequent_special_requests.join(', ')}` : ''}`,
            pt: `üåü Ol√°! Sofia aqui. Hoje √© ${dateContext.currentDate}. ${isReturningRegular ? `Este √© ${guest_name} - h√≥spede regular com ${total_bookings} reservas anteriores.` : `Este √© ${guest_name} - visitou ${total_bookings} vez${total_bookings > 1 ? 'es' : ''}.`}${common_party_size ? ` Usual: ${common_party_size} pess.` : ''}${frequent_special_requests.length > 0 ? `. Pedidos habituais: ${frequent_special_requests.join(', ')}` : ''}`,
            nl: `üåü Hallo! Sofia hier. Vandaag is ${dateContext.currentDate}. ${isReturningRegular ? `Dit is ${guest_name} - vaste gast met ${total_bookings} eerdere boekingen.` : `Dit is ${guest_name} - heeft ${total_bookings} keer${total_bookings > 1 ? '' : ''} bezocht.`}${common_party_size ? ` Gebruikelijk: ${common_party_size} pers.` : ''}${frequent_special_requests.length > 0 ? `. Gebruikelijke verzoeken: ${frequent_special_requests.join(', ')}` : ''}`,
            auto: `üåü Hi! Sofia here. Today is ${dateContext.currentDate}. ${isReturningRegular ? `This is ${guest_name} - returning guest with ${total_bookings} previous bookings.` : `This is ${guest_name} - they've visited ${total_bookings} time${total_bookings > 1 ? 's' : ''} before.`}${common_party_size ? ` Usual party: ${common_party_size}` : ''}${frequent_special_requests.length > 0 ? `. Usual requests: ${frequent_special_requests.join(', ')}` : ''}`
        };
        return greetings[language] || greetings.en;
    } else {
        // Guest context - warm and personal
        if (isReturningRegular) {
            // ‚úÖ CRITICAL FIX: Improved phrasing for regular customers with OPTIONAL common party size suggestion
            const greetings = {
                en: `üåü Welcome back, ${guest_name}! üéâ It's wonderful to see you again! How can I help you today?${common_party_size ? ` Booking for your usual ${common_party_size} people?` : ''}`,
                ru: `üåü –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${guest_name}! üéâ –†–∞–¥–∞ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?${common_party_size ? ` –ë—Ä–æ–Ω–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ, –Ω–∞ ${common_party_size} —á–µ–ª–æ–≤–µ–∫?` : ''}`,
                sr: `üåü Dobrodo≈°li nazad, ${guest_name}! üéâ Divno je videti vas ponovo! Kako Vam mogu pomoƒái?${common_party_size ? ` Da li rezervi≈°emo za uobiƒçajenih ${common_party_size} osoba?` : ''}`,
                hu: `üåü √údv√∂zl√∂m vissza, ${guest_name}! üéâ Csod√°latos √∫jra l√°tni! Hogyan seg√≠thetek?${common_party_size ? ` A szok√°sos ${common_party_size} f≈ëre foglalunk?` : ''}`,
                de: `üåü Willkommen zur√ºck, ${guest_name}! üéâ Sch√∂n, Sie wiederzusehen! Wie kann ich helfen?${common_party_size ? ` Buchen wir f√ºr die √ºblichen ${common_party_size} Personen?` : ''}`,
                fr: `üåü Bon retour, ${guest_name}! üéâ C'est merveilleux de vous revoir! Comment puis-je vous aider?${common_party_size ? ` R√©servons-nous pour les ${common_party_size} personnes habituelles?` : ''}`,
                es: `üåü ¬°Bienvenido de vuelta, ${guest_name}! üéâ ¬°Es maravilloso verte de nuevo! ¬øC√≥mo puedo ayudarte?${common_party_size ? ` ¬øReservamos para las ${common_party_size} personas habituales?` : ''}`,
                it: `üåü Bentornato, ${guest_name}! üéâ √à meraviglioso rivederti! Come posso aiutarti?${common_party_size ? ` Prenotiamo per le solite ${common_party_size} persone?` : ''}`,
                pt: `üåü Bem-vindo de volta, ${guest_name}! üéâ √â maravilhoso v√™-lo novamente! Como posso ajudar?${common_party_size ? ` Reservamos para as ${common_party_size} pessoas habituais?` : ''}`,
                nl: `üåü Welkom terug, ${guest_name}! üéâ Het is geweldig om je weer te zien! Hoe kan ik helpen?${common_party_size ? ` Boeken we voor de gebruikelijke ${common_party_size} personen?` : ''}`,
                auto: `üåü Welcome back, ${guest_name}! üéâ It's wonderful to see you again! How can I help you today?${common_party_size ? ` Booking for your usual ${common_party_size} people?` : ''}`
            };
            return greetings[language] || greetings.en;
        } else {
            // Friendly but not overly familiar greeting for infrequent guests
            const greetings = {
                en: `üåü Hello, ${guest_name}! Nice to see you again! I'm Sofia. How can I help you today?`,
                ru: `üåü –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${guest_name}! –ü—Ä–∏—è—Ç–Ω–æ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å! –Ø –°–æ—Ñ–∏—è. –ß–µ–º –º–æ–≥—É –≤–∞–º —Å–µ–≥–æ–¥–Ω—è –ø–æ–º–æ—á—å?`,
                sr: `üåü Zdravo, ${guest_name}! Drago mi je ≈°to vas ponovo vidim! Ja sam Sofija. Kako vam mogu pomoƒái danas?`,
                hu: `üåü Szia, ${guest_name}! √ñr√ºl√∂k, hogy √∫jra l√°tlak! √ân Sz√≥fia vagyok. Hogyan seg√≠thetek ma?`,
                de: `üåü Hallo, ${guest_name}! Sch√∂n, Sie wiederzusehen! Ich bin Sofia. Wie kann ich Ihnen heute helfen?`,
                fr: `üåü Bonjour, ${guest_name}! Content de vous revoir! Je suis Sofia. Comment puis-je vous aider aujourd'hui?`,
                es: `üåü ¬°Hola, ${guest_name}! ¬°Me alegra verte de nuevo! Soy Sofia. ¬øC√≥mo puedo ayudarte hoy?`,
                it: `üåü Ciao, ${guest_name}! Bello rivederti! Sono Sofia. Come posso aiutarti oggi?`,
                pt: `üåü Ol√°, ${guest_name}! Bom v√™-lo novamente! Eu sou Sofia. Como posso ajud√°-lo hoje?`,
                nl: `üåü Hallo, ${guest_name}! Leuk om je weer te zien! Ik ben Sofia. Hoe kan ik je vandaag helpen?`,
                auto: `üåü Hello, ${guest_name}! Nice to see you again! I'm Sofia. How can I help you today?`
            };
            return greetings[language] || greetings.en;
        }
    }
}

/**
 * ‚úÖ CRITICAL FIX: Smart question generation that avoids redundancy
 */
function generateSmartPartyQuestion(
    language: Language,
    hasAskedPartySize: boolean,
    isSubsequentBooking: boolean,
    commonPartySize?: number | null,
    conversationContext?: ConversationContext
): string {
    // ‚úÖ CRITICAL FIX: Don't ask if we already asked party size in this conversation
    if (hasAskedPartySize || conversationContext?.hasAskedPartySize) {
        // For subsequent bookings or if already asked, be direct and simple
        const directQuestions = {
            en: `How many guests?`,
            ru: `–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫?`,
            sr: `Koliko osoba?`,
            hu: `H√°ny f≈ë?`,
            de: `Wie viele Personen?`,
            fr: `Combien de personnes?`,
            es: `¬øCu√°ntas personas?`,
            it: `Quante persone?`,
            pt: `Quantas pessoas?`,
            nl: `Hoeveel personen?`,
            auto: `How many guests?`
        };
        return directQuestions[language] || directQuestions.en;
    }
    
    if (isSubsequentBooking) {
        // For subsequent bookings, be direct and simple
        const directQuestions = {
            en: `How many guests this time?`,
            ru: `–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑?`,
            sr: `Koliko osoba ovaj put?`,
            hu: `H√°ny f≈ë ez√∫ttal?`,
            de: `Wie viele Personen diesmal?`,
            fr: `Combien de personnes cette fois?`,
            es: `¬øCu√°ntas personas esta vez?`,
            it: `Quante persone questa volta?`,
            pt: `Quantas pessoas desta vez?`,
            nl: `Hoeveel personen deze keer?`,
            auto: `How many guests this time?`
        };
        return directQuestions[language] || directQuestions.en;
    } else if (commonPartySize) {
        // First time asking, with history - ONLY suggest if haven't asked yet
        const suggestiveQuestions = {
            en: `How many people will be joining you? (Usually ${commonPartySize} for you)`,
            ru: `–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç? (–û–±—ã—á–Ω–æ —É –≤–∞—Å ${commonPartySize})`,
            sr: `Koliko osoba ƒáe biti? (Obiƒçno ${commonPartySize} kod vas)`,
            hu: `H√°nyan lesztek? (√Åltal√°ban ${commonPartySize} f≈ë n√°lad)`,
            de: `Wie viele Personen werden dabei sein? (Normalerweise ${commonPartySize} bei Ihnen)`,
            fr: `Combien de personnes seront pr√©sentes? (Habituellement ${commonPartySize} pour vous)`,
            es: `¬øCu√°ntas personas ser√°n? (Normalmente ${commonPartySize} para ti)`,
            it: `Quante persone saranno? (Di solito ${commonPartySize} per te)`,
            pt: `Quantas pessoas ser√£o? (Normalmente ${commonPartySize} para voc√™)`,
            nl: `Hoeveel personen worden het? (Gewoonlijk ${commonPartySize} voor jou)`,
            auto: `How many people will be joining you? (Usually ${commonPartySize} for you)`
        };
        return suggestiveQuestions[language] || suggestiveQuestions.en;
    } else {
        // First time asking, no history
        const standardQuestions = {
            en: `How many guests will be joining you?`,
            ru: `–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π –±—É–¥–µ—Ç —Å –≤–∞–º–∏?`,
            sr: `Koliko gostiju ƒáe biti sa vama?`,
            hu: `H√°ny vend√©g lesz veled?`,
            de: `Wie viele G√§ste werden Sie begleiten?`,
            fr: `Combien d'invit√©s vous accompagneront?`,
            es: `¬øCu√°ntos invitados te acompa√±ar√°n?`,
            it: `Quanti ospiti ti accompagneranno?`,
            pt: `Quantos convidados o acompanhar√£o?`,
            nl: `Hoeveel gasten gaan met je mee?`,
            auto: `How many guests will be joining you?`
        };
        return standardQuestions[language] || standardQuestions.en;
    }
}

/**
 * Creates Sofia - the natural language booking specialist agent
 * ‚úÖ PHASE 1 INTEGRATION: Enhanced with context preservation awareness and unified translation
 */
export function createBookingAgent(restaurantConfig: {
    id: number;
    name: string;
    timezone: string;
    openingTime: string;
    closingTime: string;
    maxGuests: number;
    cuisine?: string;
    atmosphere?: string;
    country?: string;
    languages?: string[];
}) {

    // Get current date in restaurant timezone
    const getCurrentRestaurantContext = () => {
        try {
            const now = DateTime.now().setZone(restaurantConfig.timezone);
            const today = now.toISODate();
            const tomorrow = now.plus({ days: 1 }).toISODate();
            const currentTime = now.toFormat('HH:mm');
            const dayOfWeek = now.toFormat('cccc');

            return {
                currentDate: today,
                tomorrowDate: tomorrow,
                currentTime: currentTime,
                dayOfWeek: dayOfWeek,
                timezone: restaurantConfig.timezone
            };
        } catch (error) {
            console.error(`[BookingAgent] Error getting restaurant time context:`, error);
            const now = DateTime.now();
            return {
                currentDate: now.toISODate(),
                tomorrowDate: now.plus({ days: 1 }).toISODate(),
                currentTime: now.toFormat('HH:mm'),
                dayOfWeek: now.toFormat('cccc'),
                timezone: 'UTC'
            };
        }
    };

    const getRestaurantLanguage = () => {
        if (restaurantConfig.languages && restaurantConfig.languages.length > 0) {
            return restaurantConfig.languages[0];
        }

        const country = restaurantConfig.country?.toLowerCase();
        if (country === 'russia' || country === 'russian federation') return 'ru';
        if (country === 'serbia' || country === 'republic of serbia') return 'sr';
        if (country === 'hungary') return 'hu';
        if (country === 'germany') return 'de';
        if (country === 'france') return 'fr';
        if (country === 'spain') return 'es';
        if (country === 'italy') return 'it';
        if (country === 'portugal') return 'pt';
        if (country === 'netherlands') return 'nl';

        return 'en';
    };

    const restaurantLanguage = getRestaurantLanguage();

    // ‚úÖ CRITICAL FIX: Enhanced booking workflow instructions with explicit phone collection and alternative search handling
    const getCriticalBookingInstructions = () => {
        return `
üö® MANDATORY BOOKING WORKFLOW - FOLLOW EXACTLY:

STEP 1: GATHER ALL REQUIRED INFORMATION FIRST:
   1Ô∏è‚É£ Date (must be explicit: "2025-07-19")
   2Ô∏è‚É£ Time (must be explicit: "20:00" - NEVER assume!)
   3Ô∏è‚É£ Number of guests
   4Ô∏è‚É£ Guest name
   5Ô∏è‚É£ Guest phone number

‚ùå CRITICAL: NEVER call check_availability without EXPLICIT time!
‚ùå NEVER assume time from date (e.g., "19 –∏—é–ª—è" ‚â† "19:00")

STEP 2: Only after ALL 5 items ‚Üí call check_availability
STEP 3: If available ‚Üí call create_reservation
STEP 4: Only after successful create_reservation, say "confirmed!"

üö´ FORBIDDEN PATTERNS:
‚ùå NEVER: Check availability ‚Üí immediately ask "want me to book it?"
‚ùå NEVER: Ask "Can I confirm the booking in your name?" when you DON'T HAVE the name
‚ùå NEVER: Call create_reservation without phone number
‚ùå NEVER: Say "booked" or "confirmed" after just check_availability

‚úÖ REQUIRED PATTERNS:
‚úÖ Check availability ‚Üí "Table available! I need your name and phone number to complete the booking"
‚úÖ Have all 5 items ‚Üí Call create_reservation ‚Üí "Booking confirmed!"

üí° HANDLING FAILED AVAILABILITY (MANDATORY WORKFLOW - FOLLOW EXACTLY):
This is the MOST CRITICAL rule. LLMs often hallucinate availability when tools fail. You MUST follow this exact pattern.

üö® MANDATORY TRIGGER CONDITIONS:
- 'check_availability' returns tool_status: 'FAILURE'  
- User then asks: "when is it available?", "what about earlier?", "any other times?", "–∞ –∫–æ–≥–¥–∞ —Å–≤–æ–±–æ–¥–Ω–æ?", "–Ω–∞ —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ?", "–¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è?", "—á—Ç–æ –µ—Å—Ç—å?", "–∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ?"

üö® MANDATORY ACTION SEQUENCE:
1. Find the TIME from your FAILED 'check_availability' call in conversation history
2. Immediately call 'find_alternative_times' with that exact time as 'preferredTime'
3. NEVER suggest times without calling the tool first
4. NEVER leave 'preferredTime' as undefined/empty

üö® MANDATORY DIALOG EXAMPLE (COPY THIS PATTERN EXACTLY):
User: "I need a table for 2 tomorrow at 19:00"
Agent: [calls check_availability(date="2025-07-07", time="19:00", guests=2)] ‚Üí FAILS
Agent: "I'm sorry, but we're fully booked at 19:00 tomorrow."
User: "What about earlier?" 
Agent: [MUST call find_alternative_times(date="2025-07-07", preferredTime="19:00", guests=2)]
Agent: [After tool returns results] "I found these earlier times: 18:30 and 17:45 are available. Would either work?"

üö® FORBIDDEN ACTIONS:
‚ùå NEVER say "How about 18:00 or 18:30?" without calling find_alternative_times first
‚ùå NEVER invent times like "earlier times are usually available"
‚ùå NEVER call find_alternative_times with preferredTime: undefined
‚ùå NEVER suggest times that weren't returned by the tool

üö® VALIDATION CHECK:
Before suggesting ANY time, ask yourself: "Did find_alternative_times return this exact time?" If no, DON'T suggest it.

This prevents availability hallucination where you suggest times without tool confirmation, leading to booking failures and user frustration.

üìû PHONE COLLECTION EXAMPLES:
"Perfect! Table 5 is available for 3 guests on July 13th at 8pm. I need your name and phone number to complete the reservation."

üîí VALIDATION RULES:
- If ANY required item is missing, ask for it - do NOT proceed
- Phone numbers must have at least 7 digits
- Names must be at least 2 characters
- Always confirm all details before final booking

üö® CRITICAL: NEVER ask "Can I confirm booking in your name?" when you don't have the name!
Instead say: "I need your name and phone number to complete the booking."
`;
    };

    // ‚úÖ CRITICAL FIX: Generate personalized system prompt section with enhanced special requests handling
    const getPersonalizedPromptSection = (guestHistory: GuestHistory | null, language: Language, conversationContext?: ConversationContext): string => {
        if (!guestHistory || guestHistory.total_bookings === 0) {
            return '';
        }

        const { guest_name, guest_phone, total_bookings, common_party_size, frequent_special_requests, last_visit_date } = guestHistory;

        return `
üë§ GUEST HISTORY & PERSONALIZATION:
- Guest Name: ${guest_name}
- Guest Phone: ${guest_phone || 'Not available'}
- Total Previous Bookings: ${total_bookings}
- ${common_party_size ? `Common Party Size: ${common_party_size}` : 'No common party size pattern'}
- ${frequent_special_requests.length > 0 ? `Frequent Requests: ${frequent_special_requests.join(', ')}` : 'No frequent special requests'}
- ${last_visit_date ? `Last Visit: ${last_visit_date}` : 'No previous visits recorded'}

üí° PERSONALIZATION GUIDELINES:
- ${total_bookings >= 3 ? `RETURNING GUEST: This is a valued returning customer! Use warm, personal language.` : `INFREQUENT GUEST: Guest has visited before but not frequently.`}
- ‚úÖ CRITICAL FIX: ${common_party_size ? `USUAL PARTY SIZE: Only suggest "${common_party_size} people" if user hasn't specified AND you haven't asked about party size yet in this conversation. If you already asked about party size, DON'T ask again.` : ''}
- ${frequent_special_requests.length > 0 ? `USUAL REQUESTS: Ask "Would you like your usual ${frequent_special_requests[0]}?" when appropriate during booking.` : ''}
- ‚úÖ CONVERSATION RULE: ${conversationContext?.isSubsequentBooking ? 'This is a SUBSEQUENT booking in the same session - be concise and skip repetitive questions.' : 'This is the first booking in the session.'}
- ‚úÖ CRITICAL: Track what you've already asked to avoid repetition. If you asked about party size, don't ask again.
- **SAME NAME/PHONE HANDLING**: If the guest says "my name" or "same name", use "${guest_name}" from their history. If they say "same number", "same phone", or "using same number", use "${guest_phone || 'Not available'}" from their history.
- Use this information naturally in conversation - don't just list their history!
- Make the experience feel personal and welcoming for returning guests.`;
    };

    // ‚úÖ PHASE 1 FIX: Enhanced Maya modification execution with immediate action for clear requests
    const getMayaModificationExecutionRules = () => {
        return `
üö® CRITICAL MODIFICATION EXECUTION RULES (MAYA AGENT)
Your primary goal is to execute user requests with minimal conversation. When a user wants to modify a booking, you must act, not just talk.

RULE 1: IMMEDIATE ACTION AFTER FINDING A BOOKING
- **IF** you have just successfully found a reservation (e.g., using 'find_existing_reservation').
- **AND** the user then provides new details to change (e.g., "move to 19:10", "add one person", "move 10 minutes later").
- **THEN** your IMMEDIATE next action is to call the 'modify_reservation' tool.
- **DO NOT** talk to the user first. **DO NOT** ask for confirmation. **DO NOT** say "I will check...". CALL THE 'modify_reservation' TOOL. This is not optional. The tool will handle checking availability internally.

RULE 2: CONTEXT-AWARE RESERVATION ID RESOLUTION
- **IF** user provides a contextual reference like "—ç—Ç—É –±—Ä–æ–Ω—å", "this booking", "it", "–µ—ë", "—ç—Ç—É":
- **THEN** use the most recently modified reservation from session context
- **DO NOT** ask for clarification if context is clear from recent operations

RULE 3: TIME CALCULATION (If necessary)
- **IF** the user requests a relative time change (e.g., "10 minutes later", "half an hour earlier").
- **STEP 1:** Get the current time from the reservation details you just found.
- **STEP 2:** Calculate the new absolute time (e.g., if current is 19:00 and user says "10 minutes later", you calculate \`newTime: "19:10"\`).
- **STEP 3:** Call \`modify_reservation\` with the calculated \`newTime\` in the \`modifications\` object.

--- EXAMPLE OF CORRECT, SILENT TOOL USE ---
User: "–Ω–∞ 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏?" (move it by 10 minutes?)
Maya: [Asks for booking identifier.]
User: "–±—Ä–æ–Ω—å 2"
Maya: [Calls find_existing_reservation(identifier="2"). The tool returns booking #2, which is at 19:00.]
Maya: [Your next action MUST be to calculate the new time (19:00 + 10 mins = 19:10) and then immediately call modify_reservation(reservationId=2, modifications={newTime:"19:10"})]
Maya: [The tool returns SUCCESS. Now, and only now, you respond to the user.] "‚úÖ Done! I've moved your reservation to 19:10."

--- FORBIDDEN BEHAVIOR ---
‚ùå NEVER say "I will move it..." or "Let me confirm..." and then stop. This is a failure.
‚ùå The user's prompt ("–∏?") was required because you failed to follow this rule. Your goal is to never require that prompt again.
‚ùå NEVER call 'check_availability' directly for a modification. Use 'modify_reservation'.

--- TIME CALCULATION HELPERS (This part is unchanged) ---
- "15 –º–∏–Ω—É—Ç –ø–æ–ø–æ–∑–∂–µ" = current time + 15 minutes
- "–Ω–∞ –ø–æ–ª—á–∞—Å–∞ —Ä–∞–Ω—å—à–µ" = current time - 30 minutes
- "–Ω–∞ —á–∞—Å –ø–æ–∑–∂–µ" = current time + 60 minutes
- "change to 8pm" = newTime: "20:00"
`;
    };

    // ‚úÖ ENHANCED: Language-agnostic system prompts that work for all languages
    const getSystemPrompt = (context: 'hostess' | 'guest', userLanguage: Language = 'en', guestHistory?: GuestHistory | null, conversationContext?: ConversationContext) => {

        const dateContext = getCurrentRestaurantContext();
        const criticalInstructions = getCriticalBookingInstructions();
        const personalizedSection = getPersonalizedPromptSection(guestHistory || null, userLanguage, conversationContext);

        // ‚úÖ LANGUAGE INSTRUCTION (works for all languages)
        const languageInstruction = `üåç CRITICAL LANGUAGE RULE:
- User's language: ${userLanguage}
- You MUST respond in ${userLanguage} for ALL messages
- Maintain warm, professional tone in ${userLanguage}
- If unsure of translation, use simple clear ${userLanguage}`;

        // Tool response understanding instructions
        const toolInstructions = `
üîß TOOL RESPONSE UNDERSTANDING:
All tools return standardized responses with:
- tool_status: 'SUCCESS' or 'FAILURE'
- data: (when successful) contains the actual result
- error: (when failed) contains categorized error info

GUEST HISTORY TOOL:
- get_guest_history: Use this FIRST for telegram users to get personalized greeting info
- Only call this once per session for the first message
- Use the returned data to personalize greetings and suggestions

ERROR TYPES TO HANDLE:
1. VALIDATION_ERROR: Input format wrong (date, time, guests, etc.)
   ‚Üí Ask user to correct the input with specific guidance
2. BUSINESS_RULE: No availability, capacity limits, restaurant policies
   ‚Üí Suggest alternatives or explain constraints naturally
3. SYSTEM_ERROR: Technical issues with database/services
   ‚Üí Apologize, suggest trying again, offer manual assistance

SPECIAL BUSINESS RULE CODES:
- NO_AVAILABILITY_SUGGEST_SMALLER: No tables for requested party size, but smaller available
  ‚Üí Suggest the smaller party size option naturally and helpfully
- NAME_CLARIFICATION_NEEDED: The user has a profile with a different name. The 'details' field will contain 'dbName' (the existing name) and 'requestName' (the new one).
  ‚Üí You MUST ask the user which name they want to use.

EXAMPLES:
‚úÖ SUCCESS: {"tool_status": "SUCCESS", "data": {"available": true, "table": "5"}}
‚Üí "Great! Table 5 is available for your reservation."

‚ùå BUSINESS_RULE with SMALLER PARTY: {"tool_status": "FAILURE", "error": {"code": "NO_AVAILABILITY_SUGGEST_SMALLER"}}
‚Üí "I don't see any tables for 5 people at that time, but I have great options for 4 people. Would that work?"

‚ùå VALIDATION_ERROR: {"tool_status": "FAILURE", "error": {"type": "VALIDATION_ERROR", "field": "date"}}
‚Üí "Please use date format YY-MM-DD, like ${dateContext.currentDate}"

‚ùå SYSTEM_ERROR: {"tool_status": "FAILURE", "error": {"type": "SYSTEM_ERROR"}}
‚Üí "I'm having technical difficulties. Let me try again or I can help you manually."

ALWAYS check tool_status before using data!
`;

        // ‚úÖ CRITICAL FIX: Enhanced conversation context instructions
        const conversationInstructions = conversationContext ? `
üìù CONVERSATION CONTEXT:
- Session Turn: ${conversationContext.sessionTurnCount || 1}
- Booking Number: ${conversationContext.bookingNumber || 1} ${conversationContext.isSubsequentBooking ? '(SUBSEQUENT)' : '(FIRST)'}
- ‚úÖ CRITICAL: Asked Party Size: ${conversationContext.hasAskedPartySize ? 'YES - DO NOT ASK AGAIN' : 'NO - CAN ASK IF NEEDED'}

üéØ CONTEXT-AWARE BEHAVIOR:
${conversationContext.isSubsequentBooking ? 
  '- SUBSEQUENT BOOKING: Be concise, skip redundant questions, focus on the new booking details.' :
  '- FIRST BOOKING: Full greeting and standard workflow.'
}
${conversationContext.hasAskedPartySize ? 
  '- ‚úÖ CRITICAL: Already asked about party size - DON\'T ASK AGAIN unless user explicitly changes topic. Use their previous answer.' :
  '- Can suggest usual party size if appropriate and haven\'t asked yet.'
}
` : '';

        if (context === 'hostess') {
            // üè¢ HOSTESS CONTEXT: Staff assistant, efficiency-focused
            return `You are Sofia, the professional booking assistant for ${restaurantConfig.name} staff.

${languageInstruction}

üéØ YOUR ROLE: Staff Assistant
You help hostesses manage reservations quickly and efficiently. You understand staff workflow and speak professionally but efficiently.

üè™ RESTAURANT DETAILS:
- Name: ${restaurantConfig.name}
- Restaurant ID: ${restaurantConfig.id}
- Timezone: ${restaurantConfig.timezone}
- Hours: ${restaurantConfig.openingTime} - ${restaurantConfig.closingTime}
- Maximum party size: ${restaurantConfig.maxGuests}

üìÖ CURRENT DATE CONTEXT (CRITICAL):
- TODAY is ${dateContext.currentDate} (${dateContext.dayOfWeek})
- TOMORROW is ${dateContext.tomorrowDate}
- Current time: ${dateContext.currentTime} in ${dateContext.timezone}
- When guests say "today", use: ${dateContext.currentDate}
- When guests say "tomorrow", use: ${dateContext.tomorrowDate}
- ‚úÖ When a guest says "next Friday" and today is Wednesday, it means the Friday of the *following* week, not the closest one. Calculate this correctly.
- ALWAYS use YYYY-MM-DD format for dates
- NEVER use dates from 2023 or other years - only current dates!

${criticalInstructions}

${toolInstructions}

${conversationInstructions}

${personalizedSection}

üíº STAFF COMMUNICATION STYLE:
- Professional and efficient, like talking to a colleague
- Use quick commands: "Book Martinez for 4 tonight 8pm"
- Provide immediate results without excessive pleasantries
- Focus on getting things done fast
- Confirm actions clearly
- Handle tool errors gracefully and suggest solutions immediately

üõ†Ô∏è QUICK COMMANDS YOU UNDERSTAND:
- "Book [name] for [guests] [date] [time]" - Direct booking
- "Check availability [date] [time] [guests]" - Quick availability
- "Find alternatives for [details]" - Alternative time search

üí° EXAMPLES:
Hostess: "Check availability for 6 tonight"
Sofia: "Tonight (${dateContext.currentDate}) for 6 guests: ‚úÖ 7:00 PM Table 15, ‚úÖ 8:30 PM Table 8, ‚úÖ 9:00 PM Combined tables"

Hostess: "Book Martinez for 4 tonight 8pm phone 555-1234"
Sofia: "‚úÖ Booked! Martinez party, 4 guests, tonight (${dateContext.currentDate}) 8pm, Table 12"`;

        } else {
            // üë• GUEST CONTEXT: Customer service, welcoming
            return `You are Sofia, the friendly booking specialist for ${restaurantConfig.name}!

${languageInstruction}

üéØ YOUR ROLE: Guest Service Specialist
You help guests make reservations with warm, welcoming customer service.

üè™ RESTAURANT DETAILS:
- Name: ${restaurantConfig.name}
- Restaurant ID: ${restaurantConfig.id}
- Cuisine: ${restaurantConfig.cuisine || 'Excellent dining'}
- Atmosphere: ${restaurantConfig.atmosphere || 'Welcoming and comfortable'}
- Hours: ${restaurantConfig.openingTime} - ${restaurantConfig.closingTime}
- Timezone: ${restaurantConfig.timezone}

üìÖ CURRENT DATE CONTEXT (CRITICAL):
- TODAY is ${dateContext.currentDate} (${dateContext.dayOfWeek})
- TOMORROW is ${dateContext.tomorrowDate}
- Current time: ${dateContext.currentTime} in ${dateContext.timezone}
- When guests say "today", use: ${dateContext.currentDate}
- When guests say "tomorrow", use: ${dateContext.tomorrowDate}
- ‚úÖ When a guest says "next Friday" and today is Wednesday, it means the Friday of the *following* week, not the closest one. Calculate this correctly.
- ALWAYS use YYYY-MM-DD format for dates
- NEVER use dates from 2023 or other years - only current dates!

${criticalInstructions}

${toolInstructions}

${conversationInstructions}

${personalizedSection}

ü§ù GUEST COMMUNICATION STYLE:
- Warm and welcoming, like a friendly hostess
- Guide step-by-step through booking process
- Show enthusiasm: "I'd love to help you with that!"
- Ask follow-up questions naturally
- Celebrate successful bookings: "üéâ Your table is reserved!"
- Handle errors gracefully with helpful alternatives
- When tools fail, offer to help manually or try again

üí° CONVERSATION FLOW EXAMPLES:
Guest: "I need a table for tonight"
Sofia: "Perfect! For tonight (${dateContext.currentDate}), how many guests will be joining you? And what time would work best?"

Guest: "Can I book for tomorrow evening?"  
Sofia: "Absolutely! For tomorrow (${dateContext.tomorrowDate}) evening, what time works best and how many people? Also, I'll need your name and phone number for the reservation."

CRITICAL WORKFLOW EXAMPLES:
‚ùå WRONG: Guest: "Table for 3 tonight 8pm" ‚Üí Sofia: "‚úÖ Booked table for 3 tonight 8pm!"
‚úÖ CORRECT: Guest: "Table for 3 tonight 8pm" ‚Üí Sofia: "Great! Let me check availability for 3 guests tonight at 8pm... Perfect! Table 5 is available. I need your name and phone number to complete the reservation."

üìû PHONE COLLECTION EXAMPLES:
After availability check: "Perfect! Table 5 is available for 3 guests tonight at 8pm. I need your name and phone number to complete the reservation."`;
        }
    };

    // ‚úÖ PHASE 1 FIX: Enhanced system prompt for Maya agent with modification execution rules
    const getMayaSystemPrompt = (context: 'hostess' | 'guest', userLanguage: Language = 'en', guestHistory?: GuestHistory | null, conversationContext?: ConversationContext) => {
        const dateContext = getCurrentRestaurantContext();
        const personalizedSection = getPersonalizedPromptSection(guestHistory || null, userLanguage, conversationContext);
        const mayaModificationRules = getMayaModificationExecutionRules();

        // ‚úÖ LANGUAGE INSTRUCTION (works for all languages)
        const languageInstruction = `üåç CRITICAL LANGUAGE RULE:
- User's language: ${userLanguage}
- You MUST respond in ${userLanguage} for ALL messages
- Maintain warm, professional tone in ${userLanguage}
- If unsure of translation, use simple clear ${userLanguage}`;

        const conversationInstructions = conversationContext ? `
üìù CONVERSATION CONTEXT:
- Session Turn: ${conversationContext.sessionTurnCount || 1}
- Booking Number: ${conversationContext.bookingNumber || 1} ${conversationContext.isSubsequentBooking ? '(SUBSEQUENT)' : '(FIRST)'}
- ‚úÖ CRITICAL: Asked Party Size: ${conversationContext.hasAskedPartySize ? 'YES - DO NOT ASK AGAIN' : 'NO - CAN ASK IF NEEDED'}

üéØ CONTEXT-AWARE BEHAVIOR:
${conversationContext.isSubsequentBooking ? 
  '- SUBSEQUENT BOOKING: Be concise, skip redundant questions, focus on the new booking details.' :
  '- FIRST BOOKING: Full greeting and standard workflow.'
}
${conversationContext.hasAskedPartySize ? 
  '- ‚úÖ CRITICAL: Already asked about party size - DON\'T ASK AGAIN unless user explicitly changes topic. Use their previous answer.' :
  '- Can suggest usual party size if appropriate and haven\'t asked yet.'
}
` : '';

        return `You are Maya, the reservation management specialist for ${restaurantConfig.name}.

${languageInstruction}

üéØ YOUR ROLE:
- Help guests with EXISTING reservations
- Find, modify, or cancel existing bookings
- Always verify guest identity first
- Be understanding and helpful with changes

üîç WORKFLOW:
1. Find existing reservation first
2. Verify it belongs to the guest  
3. Make requested changes
4. Confirm all modifications

${mayaModificationRules}

üö® CRITICAL CONTEXT RULE:
When calling 'modify_reservation', if the user's message is a simple confirmation (e.g., "yes", "ok", "–¥–∞", "–¥–∞–≤–∞–π —Ç–∞–∫") and does NOT contain a number, you MUST OMIT the 'reservationId' argument in your tool call. The system will automatically use the reservation ID from the current session context. This prevents errors.

‚úÖ CRITICAL RESERVATION DISPLAY RULES:
- When showing multiple reservations, ALWAYS display with actual IDs like: "–ë—Ä–æ–Ω—å #6: 2025-07-06 –≤ 17:10 –Ω–∞ 6 —á–µ–ª–æ–≤–µ–∫"
- NEVER use numbered lists like "1, 2, 3" - always use real IDs "#6, #3, #4"
- When asking user to choose, say: "–£–∫–∞–∂–∏—Ç–µ ID –±—Ä–æ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, #6)"
- If user provides invalid ID, gently ask: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –±—Ä–æ–Ω–∏ –∏–∑ —Å–ø–∏—Å–∫–∞: #6, #3, #4"

üìÖ CURRENT DATE CONTEXT (CRITICAL):
- TODAY is ${dateContext.currentDate} (${dateContext.dayOfWeek})
- TOMORROW is ${dateContext.tomorrowDate}
- Current time: ${dateContext.currentTime} in ${dateContext.timezone}
- When guests say "today", use: ${dateContext.currentDate}
- When guests say "tomorrow", use: ${dateContext.tomorrowDate}
- ALWAYS use YYYY-MM-DD format for dates

üí¨ STYLE: Understanding, efficient, secure

${conversationInstructions}

${personalizedSection}`;
    };

    return {
        client: openaiClient, // Main conversations still use OpenAI for compatibility
        claude, // ‚úÖ PHASE 1 FIX: Add Claude client for fallback system
        restaurantConfig,
        systemPrompt: getSystemPrompt('guest'), // Default to guest context
        tools: agentTools,
        restaurantLanguage,
        // ‚úÖ PHASE 1 FIX: Enhanced methods with unified translation support
        getPersonalizedGreeting: (guestHistory: GuestHistory | null, language: Language, context: 'hostess' | 'guest', conversationContext?: ConversationContext) => {
            return generatePersonalizedGreeting(guestHistory, language, context, conversationContext);
        },
        getCurrentRestaurantContext,
        generateSmartPartyQuestion,
        updateInstructions: (context: 'hostess' | 'guest', language: Language = 'en', guestHistory?: GuestHistory | null, conversationContext?: ConversationContext) => {
            return getSystemPrompt(context, language, guestHistory, conversationContext);
        },
        // ‚úÖ PHASE 1 FIX: Add Maya-specific system prompt method
        updateMayaInstructions: (context: 'hostess' | 'guest', language: Language = 'en', guestHistory?: GuestHistory | null, conversationContext?: ConversationContext) => {
            return getMayaSystemPrompt(context, language, guestHistory, conversationContext);
        },
        // ‚úÖ PHASE 1 FIX: Add unified translation service access
        translate: UnifiedTranslationService.translate
    };
}

// Export interfaces for session management
export interface BookingSession {
    sessionId: string;
    restaurantId: number;
    platform: 'web' | 'telegram';
    context: 'hostess' | 'guest';
    language: Language;
    telegramUserId?: string;
    webSessionId?: string;
    createdAt: Date;
    lastActivity: Date;
    gatheringInfo: {
        date?: string;
        time?: string;
        guests?: number;
        name?: string;
        phone?: string;
        comments?: string;
    };
    conversationHistory: Array<{
        role: 'user' | 'assistant';
        content: string;
        timestamp: Date;
        toolCalls?: any[];
    }>;
    currentStep: 'greeting' | 'gathering' | 'checking' | 'confirming' | 'completed';
    hasActiveReservation?: number;
}

export function detectContext(platform: 'web' | 'telegram', message?: string): 'hostess' | 'guest' {
    if (platform === 'web') return 'hostess';
    if (platform === 'telegram') return 'guest';

    if (message) {
        const hostessKeywords = ['book for', 'check availability', 'find table', 'staff', 'quick'];
        if (hostessKeywords.some(keyword => message.toLowerCase().includes(keyword))) {
            return 'hostess';
        }
    }

    return 'guest';
}

export function createBookingSession(config: {
    restaurantId: number;
    platform: 'web' | 'telegram';
    language?: Language;
    telegramUserId?: string;
    webSessionId?: string;
}): BookingSession {
    const context = detectContext(config.platform);

    return {
        sessionId: generateSessionId(),
        restaurantId: config.restaurantId,
        platform: config.platform,
        context,
        language: config.language || 'en',
        telegramUserId: config.telegramUserId,
        webSessionId: config.webSessionId,
        createdAt: new Date(),
        lastActivity: new Date(),
        gatheringInfo: {},
        conversationHistory: [],
        currentStep: 'greeting'
    };
}

function generateSessionId(): string {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

export function updateSessionInfo(
    session: BookingSession,
    updates: Partial<BookingSession['gatheringInfo']>
): BookingSession {
    return {
        ...session,
        gatheringInfo: {
            ...session.gatheringInfo,
            ...updates
        },
        lastActivity: new Date()
    };
}

// ‚úÖ ENHANCED: Check if we have all required information for booking
export function hasCompleteBookingInfo(session: BookingSession): boolean {
    const { date, time, guests, name, phone } = session.gatheringInfo;
    const isComplete = !!(date && time && guests && name && phone);

    if (!isComplete) {
        const missing = [];
        if (!date) missing.push('date');
        if (!time) missing.push('time');
        if (!guests) missing.push('guests');
        if (!name) missing.push('name');
        if (!phone) missing.push('phone');

        console.log(`[BookingSession] Missing required info: ${missing.join(', ')}`);
    }

    return isComplete;
}

export default createBookingAgent;