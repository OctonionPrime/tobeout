// src/agents/apollo-agent.ts
// üöÄ PRODUCTION-READY: Apollo Availability Agent - Complete Implementation
// ‚úÖ CRITICAL FIX: Missing availability agent that's referenced throughout the system
// ‚úÖ INTEGRATED: Seamless integration with fixed enhanced-conversation-manager.ts
// ‚úÖ OPTIMIZED: Intelligent alternative time finding with user preference analysis
// ‚úÖ MULTILINGUAL: Full support for all system languages with contextual responses
// ‚úÖ PROFESSIONAL: Production-grade error handling and comprehensive logging
// üö® LANGUAGE BUG FIX: Complete language enforcement system for availability specialist

import { BaseAgent, AgentContext, AgentResponse, AgentConfig, RestaurantConfig } from './base-agent';
import { agentTools } from './agent-tools';
import { DateTime } from 'luxon';
import { 
    getRestaurantDateTime, 
    getRestaurantTimeContext,
    isRestaurantOpen,
    getRestaurantOperatingStatus,
    formatRestaurantTime24Hour,
    isValidTimezone,
    isOvernightOperation
} from '../../utils/timezone-utils';

// üö® LANGUAGE ENFORCEMENT: Add Language type for comprehensive validation
export type Language = 'en' | 'ru' | 'sr' | 'hu' | 'de' | 'fr' | 'es' | 'it' | 'pt' | 'nl' | 'auto';

/**
 * üîß ENHANCED: Availability failure context interface
 */
interface AvailabilityFailureContext {
    originalDate: string;
    originalTime: string;
    originalGuests: number;
    failureReason: string;
    detectedAt: string;
    userPreferences?: {
        timeFlexibility: 'strict' | 'flexible' | 'very_flexible';
        preferredTimeRange: 'morning' | 'afternoon' | 'evening' | 'any';
        acceptsEarlier: boolean;
        acceptsLater: boolean;
    };
}

/**
 * üîß ENHANCED: Alternative time with scoring
 */
interface AlternativeTimeOption {
    date: string;
    time: string;
    availableGuests: number;
    table?: string;
    score: number;
    proximity: number; // Minutes from original time
    reason: string;
    timeOfDay: 'morning' | 'afternoon' | 'evening';
}

/**
 * üöÄ PRODUCTION-READY: Apollo Agent - Availability Specialist
 * 
 * Apollo is the availability specialist agent that handles situations when
 * the preferred booking time is not available. It finds and presents
 * alternative times intelligently based on user preferences and context.
 * 
 * Core Responsibilities:
 * 1. Analyze availability failures and understand user preferences
 * 2. Find alternative times near the requested slot
 * 3. Present alternatives in an intelligent, user-friendly way
 * 4. Handle user selection and prepare for booking handoff
 * 5. Provide empathetic communication during disappointment
 */
export class ApolloAgent extends BaseAgent {
    readonly name = 'Apollo';
    readonly description = 'Availability specialist for finding alternative booking times';
    readonly capabilities = [
        'find_alternative_times',
        'check_availability',
        'get_restaurant_info'
    ];

    // üéØ INTELLIGENT: Time preference patterns for better suggestions
    private readonly timePreferencePatterns = {
        morning: { start: '08:00', end: '11:59', label: 'morning' },
        lunch: { start: '12:00', end: '15:59', label: 'afternoon' },
        dinner: { start: '16:00', end: '22:00', label: 'evening' },
        late: { start: '22:01', end: '23:59', label: 'late evening' }
    };

    constructor(config: AgentConfig, restaurantConfig: RestaurantConfig) {
        super(config, restaurantConfig);
        this.logAgentAction('Apollo Agent initialized - availability specialist ready with language enforcement', {
            agent: this.name,
            capabilities: this.capabilities,
            languageEnforcementEnabled: true // üö® NEW
        });
    }

    /**
     * üö® CRITICAL FIX: Comprehensive language enforcement rules for Apollo agent
     * Prevents language mixing in availability recovery and alternative time presentation
     */
    private getLanguageEnforcementRules(language: Language): string {
        const languageNames: Record<Language, string> = {
            'en': 'English', 'ru': 'Russian', 'sr': 'Serbian', 'hu': 'Hungarian',
            'de': 'German', 'fr': 'French', 'es': 'Spanish', 'it': 'Italian',
            'pt': 'Portuguese', 'nl': 'Dutch', 'auto': 'English'
        };

        const currentLanguageName = languageNames[language] || 'English';
        
        return `üö® CRITICAL APOLLO LANGUAGE ENFORCEMENT RULES:

**MANDATORY LANGUAGE**: You MUST respond ONLY in ${currentLanguageName}.

**FORBIDDEN ACTIONS**:
‚ùå NEVER switch languages mid-response
‚ùå NEVER mix languages in a single response  
‚ùå NEVER respond in English if conversation language is ${currentLanguageName}
‚ùå NEVER change language without explicit user request

**REQUIRED BEHAVIOR**:
‚úÖ ALL responses must be in ${currentLanguageName}
‚úÖ Maintain empathetic, solution-focused tone in ${currentLanguageName}
‚úÖ Use natural expressions in ${currentLanguageName}
‚úÖ Present availability alternatives in ${currentLanguageName}
‚úÖ Facilitate booking handoffs in ${currentLanguageName}

**APOLLO-SPECIFIC LANGUAGE REQUIREMENTS**:
‚úÖ Empathetic disappointment responses in ${currentLanguageName}
‚úÖ Alternative time presentations in ${currentLanguageName}
‚úÖ Availability explanations in ${currentLanguageName}
‚úÖ Booking selection guidance in ${currentLanguageName}
‚úÖ Handoff preparation messages in ${currentLanguageName}

Current conversation language: **${currentLanguageName}** (LOCKED)`;
    }

    /**
     * üö® CRITICAL FIX: Language-specific availability specialist examples
     * Provides natural templates for availability recovery conversations in multiple languages
     */
    private getAvailabilityExamples(language: Language): string {
        const examples: Record<Language, string> = {
            'en': `
**APOLLO AVAILABILITY EXAMPLES IN ENGLISH:**

üìã **Empathetic Opening:**
User: "Is 7 PM available for 4 people tomorrow?"
Apollo: "I understand you're looking for 7 PM tomorrow for 4 guests. Let me check our availability and find you some excellent options!"

üìã **Alternative Presentation:**
Apollo: "I found some great alternatives close to your preferred 7 PM time:
‚Ä¢ 6:30 PM - Just 30 minutes earlier, perfect for a relaxed start
‚Ä¢ 7:30 PM - Prime dining time with excellent service
‚Ä¢ 8:00 PM - Quieter atmosphere, ideal for intimate conversation
Which of these works best for you?"

üìã **Selection Guidance:**
User: "The 6:30 PM sounds good."
Apollo: "Perfect choice! 6:30 PM gives you a wonderful head start on the evening. Let me connect you with Sofia to complete your booking."

üìã **Handoff Signals:**
Apollo: "Excellent! I'm transferring you to Sofia who will finalize your reservation for 6:30 PM tomorrow for 4 guests."`,

            'ru': `
**–ü–†–ò–ú–ï–†–´ –î–û–°–¢–£–ü–ù–û–°–¢–ò APOLLO –ù–ê –†–£–°–°–ö–û–ú:**

üìã **–ü–æ–Ω–∏–º–∞—é—â–µ–µ –Ω–∞—á–∞–ª–æ:**
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ï—Å—Ç—å –ª–∏ –º–µ—Å—Ç–∞ –Ω–∞ 19:00 –∑–∞–≤—Ç—Ä–∞ –Ω–∞ 4 —á–µ–ª–æ–≤–µ–∫–∞?"
Apollo: "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ –≤—Ä–µ–º—è –Ω–∞ 19:00 –∑–∞–≤—Ç—Ä–∞ –Ω–∞ 4 –≥–æ—Å—Ç–µ–π. –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏ –Ω–∞–π—Ç–∏ –æ—Ç–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!"

üìã **–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤:**
Apollo: "–ù–∞—à–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –±–ª–∏–∑–∫–æ –∫ –∂–µ–ª–∞–µ–º–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ 19:00:
‚Ä¢ 18:30 - –í—Å–µ–≥–æ –Ω–∞ 30 –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ, –æ—Ç–ª–∏—á–Ω–æ –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞
‚Ä¢ 19:30 - –ü—Ä–∞–π–º-—Ç–∞–π–º –¥–ª—è —É–∂–∏–Ω–∞ —Å –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º
‚Ä¢ 20:00 - –ë–æ–ª–µ–µ —Å–ø–æ–∫–æ–π–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∏–Ω—Ç–∏–º–Ω–æ–π –±–µ—Å–µ–¥—ã
–ö–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?"

üìã **–ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ:**
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "18:30 –∑–≤—É—á–∏—Ç —Ö–æ—Ä–æ—à–æ."
Apollo: "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! 18:30 –¥–∞—Å—Ç –≤–∞–º –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞—á–∞–ª–æ –≤–µ—á–µ—Ä–∞. –°–æ–µ–¥–∏–Ω—è—é —Å –°–æ—Ñ–∏–µ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."

üìã **–°–∏–≥–Ω–∞–ª—ã –ø–µ—Ä–µ–¥–∞—á–∏:**
Apollo: "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! –ü–µ—Ä–µ–¥–∞—é –≤–∞—Å –°–æ—Ñ–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ—Ñ–æ—Ä–º–∏—Ç –≤–∞—à—É –±—Ä–æ–Ω—å –Ω–∞ 18:30 –∑–∞–≤—Ç—Ä–∞ –Ω–∞ 4 –≥–æ—Å—Ç–µ–π."`,

            'sr': `
**PRIMERI DOSTUPNOSTI APOLLO NA SRPSKOM:**

üìã **Razumevajuƒái poƒçetak:**
Korisnik: "Da li je dostupno u 19:00 sutra za 4 osobe?"
Apollo: "Razumem da tra≈æite vreme u 19:00 sutra za 4 gosta. Dozvolite da proverim dostupnost i naƒëem odliƒçne opcije!"

üìã **Prezentacija alternativa:**
Apollo: "Na≈°ao sam nekoliko odliƒçnih opcija blizu va≈°eg ≈æeljenog vremena 19:00:
‚Ä¢ 18:30 - Samo 30 minuta ranije, savr≈°eno za opu≈°ten poƒçetak
‚Ä¢ 19:30 - Najbolje vreme za veƒçeru sa odliƒçnom uslugom
‚Ä¢ 20:00 - Mirnija atmosfera, idealno za intimnu konverzaciju
Koja od ovih opcija vam najbolje odgovara?"

üìã **Pomoƒá u izboru:**
Korisnik: "18:30 zvuƒçi dobro."
Apollo: "Odliƒçan izbor! 18:30 vam omoguƒáava divan poƒçetak veƒçeri. Povezujem vas sa Sofijom da zavr≈°i rezervaciju."

üìã **Signali prenosa:**
Apollo: "Odliƒçno! Prebacujem vas na Sofiju koja ƒáe finalizovati va≈°u rezervaciju za 18:30 sutra za 4 gosta."`,

            'hu': `
**APOLLO EL√âRHET≈êS√âG P√âLD√ÅK MAGYARUL:**

üìã **Meg√©rt≈ë kezd√©s:**
Felhaszn√°l√≥: "El√©rhet≈ë-e holnap 19:00-ra 4 f≈ëre?"
Apollo: "√ârtem, hogy holnap 19:00-ra keres helyet 4 vend√©gnek. Hadd n√©zzem meg az el√©rhet≈ës√©get √©s tal√°ljak kiv√°l√≥ opci√≥kat!"

üìã **Alternat√≠v√°k bemutat√°sa:**
Apollo: "Tal√°ltam n√©h√°ny nagyszer≈± opci√≥t a k√≠v√°nt 19:00-hoz k√∂zel:
‚Ä¢ 18:30 - Csak 30 perccel kor√°bban, t√∂k√©letes a nyugodt kezd√©shez
‚Ä¢ 19:30 - Pr√©mium vacsoraid≈ë kiv√°l√≥ kiszolg√°l√°ssal
‚Ä¢ 20:00 - Csendesebb l√©gk√∂r, ide√°lis intim besz√©lget√©shez
Melyik felel meg legjobban?"

üìã **V√°laszt√°si seg√≠ts√©g:**
Felhaszn√°l√≥: "A 18:30 j√≥l hangzik."
Apollo: "T√∂k√©letes v√°laszt√°s! A 18:30 csod√°latos kezdetet ad az est√©nek. Kapcsolom Sofi√°val a foglal√°s befejez√©s√©hez."

üìã **√Åtad√°si jelek:**
Apollo: "Kiv√°l√≥! √Åtir√°ny√≠tom Sofi√°hoz, aki v√©gleges√≠ti a foglal√°s√°t holnap 18:30-ra 4 vend√©gre."`,

            'de': `
**APOLLO VERF√úGBARKEITSBEISPIELE AUF DEUTSCH:**

üìã **Verst√§ndnisvoller Beginn:**
Benutzer: "Ist morgen um 19:00 f√ºr 4 Personen verf√ºgbar?"
Apollo: "Ich verstehe, dass Sie morgen um 19:00 f√ºr 4 G√§ste suchen. Lassen Sie mich die Verf√ºgbarkeit pr√ºfen und ausgezeichnete Optionen finden!"

üìã **Alternativpr√§sentation:**
Apollo: "Ich habe einige gro√üartige Optionen nahe Ihrer gew√ºnschten Zeit 19:00 gefunden:
‚Ä¢ 18:30 - Nur 30 Minuten fr√ºher, perfekt f√ºr einen entspannten Start
‚Ä¢ 19:30 - Prime-Time zum Abendessen mit ausgezeichnetem Service
‚Ä¢ 20:00 - Ruhigere Atmosph√§re, ideal f√ºr intime Gespr√§che
Welche Option passt am besten zu Ihnen?"

üìã **Auswahlhilfe:**
Benutzer: "18:30 klingt gut."
Apollo: "Perfekte Wahl! 18:30 gibt Ihnen einen wunderbaren Start in den Abend. Ich verbinde Sie mit Sofia f√ºr die Buchungsabwicklung."

üìã **√úbergabesignale:**
Apollo: "Ausgezeichnet! Ich leite Sie an Sofia weiter, die Ihre Reservierung f√ºr morgen 18:30 f√ºr 4 G√§ste finalisiert."`,

            'fr': `
**EXEMPLES DE DISPONIBILIT√â APOLLO EN FRAN√áAIS:**

üìã **D√©but compr√©hensif:**
Utilisateur: "Y a-t-il de la place demain √† 19h00 pour 4 personnes?"
Apollo: "Je comprends que vous cherchez demain √† 19h00 pour 4 convives. Permettez-moi de v√©rifier la disponibilit√© et de trouver d'excellentes options!"

üìã **Pr√©sentation des alternatives:**
Apollo: "J'ai trouv√© quelques excellentes options pr√®s de votre heure souhait√©e 19h00:
‚Ä¢ 18h30 - Seulement 30 minutes plus t√¥t, parfait pour un d√©but d√©tendu
‚Ä¢ 19h30 - Heure de pointe pour le d√Æner avec un excellent service
‚Ä¢ 20h00 - Atmosph√®re plus calme, id√©ale pour une conversation intime
Laquelle de ces options vous convient le mieux?"

üìã **Aide √† la s√©lection:**
Utilisateur: "18h30 sonne bien."
Apollo: "Parfait choix! 18h30 vous donne un merveilleux d√©but de soir√©e. Je vous connecte avec Sofia pour finaliser votre r√©servation."

üìã **Signaux de transfert:**
Apollo: "Excellent! Je vous transf√®re √† Sofia qui finalisera votre r√©servation pour demain 18h30 pour 4 convives."`,

            'es': `
**EJEMPLOS DE DISPONIBILIDAD APOLLO EN ESPA√ëOL:**

üìã **Comienzo comprensivo:**
Usuario: "¬øEst√° disponible ma√±ana a las 19:00 para 4 personas?"
Apollo: "Entiendo que busca ma√±ana a las 19:00 para 4 hu√©spedes. ¬°Perm√≠tame verificar la disponibilidad y encontrar excelentes opciones!"

üìã **Presentaci√≥n de alternativas:**
Apollo: "Encontr√© algunas opciones excelentes cerca de su hora preferida 19:00:
‚Ä¢ 18:30 - Solo 30 minutos antes, perfecto para un comienzo relajado
‚Ä¢ 19:30 - Hora pico para cenar con excelente servicio
‚Ä¢ 20:00 - Atm√≥sfera m√°s tranquila, ideal para conversaci√≥n √≠ntima
¬øCu√°l de estas opciones le funciona mejor?"

üìã **Gu√≠a de selecci√≥n:**
Usuario: "18:30 suena bien."
Apollo: "¬°Perfecta elecci√≥n! 18:30 le da un maravilloso comienzo a la noche. Lo conecto con Sofia para completar su reserva."

üìã **Se√±ales de transferencia:**
Apollo: "¬°Excelente! Lo transfiero a Sofia quien finalizar√° su reserva para ma√±ana 18:30 para 4 hu√©spedes."`,

            'it': `
**ESEMPI DI DISPONIBILIT√Ä APOLLO IN ITALIANO:**

üìã **Inizio comprensivo:**
Utente: "√à disponibile domani alle 19:00 per 4 persone?"
Apollo: "Capisco che cerca domani alle 19:00 per 4 ospiti. Mi permetta di controllare la disponibilit√† e trovare ottime opzioni!"

üìã **Presentazione alternative:**
Apollo: "Ho trovato alcune ottime opzioni vicine al suo orario preferito 19:00:
‚Ä¢ 18:30 - Solo 30 minuti prima, perfetto per un inizio rilassato
‚Ä¢ 19:30 - Ora di punta per cenare con servizio eccellente
‚Ä¢ 20:00 - Atmosfera pi√π tranquilla, ideale per conversazione intima
Quale di queste opzioni le funziona meglio?"

üìã **Guida alla selezione:**
Utente: "18:30 suona bene."
Apollo: "Scelta perfetta! 18:30 le d√† un meraviglioso inizio alla serata. La collego con Sofia per completare la prenotazione."

üìã **Segnali di trasferimento:**
Apollo: "Eccellente! La trasferisco a Sofia che finalizzer√† la sua prenotazione per domani 18:30 per 4 ospiti."`,

            'pt': `
**EXEMPLOS DE DISPONIBILIDADE APOLLO EM PORTUGU√äS:**

üìã **In√≠cio compreensivo:**
Usu√°rio: "Est√° dispon√≠vel amanh√£ √†s 19:00 para 4 pessoas?"
Apollo: "Entendo que busca amanh√£ √†s 19:00 para 4 convidados. Permita-me verificar a disponibilidade e encontrar excelentes op√ß√µes!"

üìã **Apresenta√ß√£o de alternativas:**
Apollo: "Encontrei algumas √≥timas op√ß√µes pr√≥ximas ao seu hor√°rio preferido 19:00:
‚Ä¢ 18:30 - Apenas 30 minutos antes, perfeito para um in√≠cio relaxado
‚Ä¢ 19:30 - Hor√°rio nobre para jantar com excelente servi√ßo
‚Ä¢ 20:00 - Atmosfera mais tranquila, ideal para conversa √≠ntima
Qual dessas op√ß√µes funciona melhor para voc√™?"

üìã **Orienta√ß√£o de sele√ß√£o:**
Usu√°rio: "18:30 soa bem."
Apollo: "Escolha perfeita! 18:30 lhe d√° um come√ßo maravilhoso da noite. Vou conect√°-lo com Sofia para completar sua reserva."

üìã **Sinais de transfer√™ncia:**
Apollo: "Excelente! Estou transferindo voc√™ para Sofia que finalizar√° sua reserva para amanh√£ 18:30 para 4 convidados."`,

            'nl': `
**APOLLO BESCHIKBAARHEIDSVOORBEELDEN IN HET NEDERLANDS:**

üìã **Begripvolle start:**
Gebruiker: "Is morgen om 19:00 beschikbaar voor 4 personen?"
Apollo: "Ik begrijp dat u morgen om 19:00 zoekt voor 4 gasten. Laat me de beschikbaarheid controleren en uitstekende opties vinden!"

üìã **Alternatieven presentatie:**
Apollo: "Ik vond enkele geweldige opties dicht bij uw gewenste tijd 19:00:
‚Ä¢ 18:30 - Slechts 30 minuten eerder, perfect voor een ontspannen start
‚Ä¢ 19:30 - Prime time voor dineren met uitstekende service
‚Ä¢ 20:00 - Rustigere sfeer, ideaal voor intiem gesprek
Welke van deze opties werkt het beste voor u?"

üìã **Selectiehulp:**
Gebruiker: "18:30 klinkt goed."
Apollo: "Perfecte keuze! 18:30 geeft u een prachtige start van de avond. Ik verbind u met Sofia om uw reservering te voltooien."

üìã **Overdracht signalen:**
Apollo: "Uitstekend! Ik draag u over aan Sofia die uw reservering voor morgen 18:30 voor 4 gasten zal afronden."`,

            'auto': `
**APOLLO AVAILABILITY EXAMPLES IN ENGLISH:**

üìã **Empathetic Opening:**
User: "Is 7 PM available for 4 people tomorrow?"
Apollo: "I understand you're looking for 7 PM tomorrow for 4 guests. Let me check our availability and find you some excellent options!"

üìã **Alternative Presentation:**
Apollo: "I found some great alternatives close to your preferred 7 PM time:
‚Ä¢ 6:30 PM - Just 30 minutes earlier, perfect for a relaxed start
‚Ä¢ 7:30 PM - Prime dining time with excellent service
‚Ä¢ 8:00 PM - Quieter atmosphere, ideal for intimate conversation
Which of these works best for you?"

üìã **Selection Guidance:**
User: "The 6:30 PM sounds good."
Apollo: "Perfect choice! 6:30 PM gives you a wonderful head start on the evening. Let me connect you with Sofia to complete your booking."

üìã **Handoff Signals:**
Apollo: "Excellent! I'm transferring you to Sofia who will finalize your reservation for 6:30 PM tomorrow for 4 guests."`
        };

        return examples[language] || examples['en'];
    }

    /**
     * üîß PRODUCTION-READY: System prompt optimized for availability specialist role
     * üö® ENHANCED: Now includes comprehensive language enforcement
     */
    generateSystemPrompt(context: AgentContext): string {
        const { language, availabilityFailureContext } = context;

        // üö® CRITICAL: Enhanced language enforcement at the very beginning
        const languageEnforcementRules = this.getLanguageEnforcementRules(language);
        const availabilityExamples = this.getAvailabilityExamples(language);

        const dateContext = this.getRestaurantContext();
        const failureSection = this.getFailureContextSection(availabilityFailureContext);
        const communicationGuidelines = this.getCommunicationGuidelines(language);
        const businessHoursSection = this.getBusinessHoursSection();

        // üö® ENHANCED: Add language-specific conversation tracking
        this.logAgentAction('Apollo system prompt generated with language enforcement', {
            agent: this.name,
            conversationLanguage: language,
            hasFailureContext: !!availabilityFailureContext,
            purpose: 'availability_recovery',
            bugFixed: 'APOLLO_LANGUAGE_ENFORCEMENT'
        });

        return `${languageEnforcementRules}

You are Apollo, the availability specialist for ${this.restaurantConfig.name}.

üéØ YOUR SPECIALIZED ROLE: Availability Recovery Expert
When guests can't get their preferred time, you transform disappointment into opportunity by finding excellent alternatives.

üè™ RESTAURANT DETAILS:
- Name: ${this.restaurantConfig.name}
- Cuisine: ${this.restaurantConfig.cuisine || 'Excellent dining'}
- Hours: ${this.restaurantConfig.openingTime} - ${this.restaurantConfig.closingTime}
- Timezone: ${this.restaurantConfig.timezone}
${isOvernightOperation(this.restaurantConfig.openingTime || '09:00', this.restaurantConfig.closingTime || '23:00') ? 
  '- ‚ö†Ô∏è OVERNIGHT OPERATION: Open past midnight' : ''}

üìÖ CURRENT CONTEXT:
- TODAY: ${dateContext.currentDate} (${dateContext.dayOfWeek})
- TOMORROW: ${dateContext.tomorrowDate}
- Current time: ${dateContext.currentTime}
- Restaurant status: ${dateContext.isOpen ? 'OPEN üü¢' : 'CLOSED üî¥'}

${failureSection}

${communicationGuidelines}

${businessHoursSection}

üõ†Ô∏è YOUR WORKFLOW:
1. **Acknowledge & Empathize**: Show understanding of their disappointment
2. **Immediate Action**: Call find_alternative_times with the failed parameters
3. **Smart Presentation**: Present alternatives ranked by proximity and preference
4. **Guide Selection**: Help them choose the best alternative
5. **Seamless Handoff**: Transfer back to Sofia for booking completion

${availabilityExamples}

üîß TOOL USAGE:
- **find_alternative_times**: Use immediately with failure context parameters
- **check_availability**: Only if guest requests specific time verification
- **get_restaurant_info**: For business hours or location questions

üö® CRITICAL RULES:
1. **NEVER** try to create bookings - you find alternatives only
2. **ALWAYS** use the failure context parameters for find_alternative_times
3. **PRESENT** max 3 alternatives to avoid overwhelming guest
4. **HANDOFF** to Sofia once guest chooses alternative
5. **BE EMPATHETIC** but solution-focused throughout

üí° CONVERSATION STYLE:
- **Understanding**: "I completely understand..."
- **Optimistic**: "I found some excellent options!"
- **Clear**: Present alternatives with specific benefits
- **Encouraging**: "This time is actually even better because..."
- **Professional**: Maintain expert availability specialist persona

üéØ SUCCESS METRICS:
- Guest feels heard and understood
- Alternatives are presented clearly and attractively
- Guest selects an alternative confidently
- Smooth handoff to Sofia for booking completion

Remember: ALL responses must be in the conversation language specified above. Provide natural, empathetic availability recovery while maintaining language consistency.`;
    }

    /**
     * üöÄ CRITICAL: Enhanced message handling with availability failure recovery
     * üö® ENHANCED: Now includes language-aware logging
     */
    async handleMessage(message: string, context: AgentContext): Promise<AgentResponse> {
        const startTime = Date.now();

        try {
            // üö® ENHANCED: Language-aware logging
            this.logAgentAction('Apollo processing availability recovery request', {
                messageLength: message.length,
                conversationLanguage: context.language,
                hasFailureContext: !!context.availabilityFailureContext,
                failureDetails: context.availabilityFailureContext,
                agent: this.name,
                purpose: 'availability_recovery'
            });

            // üö® CRITICAL: Check if we have failure context to work with
            if (!context.availabilityFailureContext) {
                this.logAgentAction('‚ö†Ô∏è Apollo activated without failure context - requesting clarification');
                
                const clarificationMessages = {
                    en: "I'm here to help find alternative times, but I need to know what time you were originally looking for. What date, time, and party size were you hoping for?",
                    ru: "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∏—Å–∫–∞–ª–∏. –ö–∞–∫–∏–µ –¥–∞—Ç–∞, –≤—Ä–µ–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏?",
                    sr: "Tu sam da pomognem da naƒëemo alternativno vreme, ali treba da znam koje vreme ste originalno tra≈æili. Koji datum, vreme i broj gostiju ste ≈æeleli?",
                    hu: "Itt vagyok, hogy seg√≠tsek alternat√≠v id≈ëpontot tal√°lni, de tudnom kell, milyen id≈ëpontra gondolt eredetileg. Milyen d√°tum, id≈ëpont √©s l√©tsz√°m √©rdekelte?",
                    de: "Ich bin hier, um alternative Zeiten zu finden, aber ich muss wissen, welche Zeit Sie urspr√ºnglich wollten. Welches Datum, welche Uhrzeit und wie viele G√§ste?",
                    fr: "Je suis l√† pour vous aider √† trouver des heures alternatives, mais j'ai besoin de savoir quelle heure vous cherchiez initialement. Quelle date, heure et nombre d'invit√©s?",
                    es: "Estoy aqu√≠ para ayudar a encontrar horarios alternativos, pero necesito saber qu√© hora buscaba originalmente. ¬øQu√© fecha, hora y n√∫mero de hu√©spedes?",
                    it: "Sono qui per aiutare a trovare orari alternativi, ma ho bisogno di sapere che ora cercava originariamente. Quale data, ora e numero di ospiti?",
                    pt: "Estou aqui para ajudar a encontrar hor√°rios alternativos, mas preciso saber que hor√°rio voc√™ estava procurando originalmente. Que data, hora e n√∫mero de convidados?",
                    nl: "Ik ben hier om alternatieve tijden te vinden, maar ik moet weten naar welke tijd u oorspronkelijk zocht. Welke datum, tijd en aantal gasten?",
                    auto: "I'm here to help find alternative times, but I need to know what time you were originally looking for. What date, time, and party size were you hoping for?"
                };

                const language = context.language || 'auto';
                const clarificationMessage = clarificationMessages[language] || clarificationMessages.auto;

                return {
                    content: clarificationMessage,
                    metadata: {
                        processedAt: new Date().toISOString(),
                        agentType: this.name,
                        confidence: 0.9,
                        processingTimeMs: Date.now() - startTime,
                        action: 'clarification_request',
                        reason: 'no_failure_context',
                        conversationLanguage: context.language, // üö® NEW: Track conversation language
                        languageEnforcementApplied: true // üö® NEW: Confirm language enforcement
                    }
                };
            }

            // üéØ INTELLIGENT: Analyze user message for preferences
            const userPreferences = this.analyzeUserPreferences(message, context.language || 'en');
            
            // üîß Generate empathetic response with immediate action
            const systemPrompt = this.generateSystemPrompt(context);
            const enhancedPrompt = `${systemPrompt}

USER'S CURRENT MESSAGE: "${message}"

DETECTED USER PREFERENCES:
${JSON.stringify(userPreferences, null, 2)}

üö® IMMEDIATE ACTION REQUIRED:
You MUST call find_alternative_times with the failure context parameters immediately.
After getting results, present the best alternatives empathetically and clearly.`;

            const response = await this.generateResponse(enhancedPrompt, message, {
                model: 'sonnet',
                context: 'apollo-availability-recovery',
                maxTokens: 1200,
                temperature: 0.7
            });

            // üö® ENHANCED: Language-aware success logging
            this.logAgentAction('Apollo response generated with language consistency', {
                processingTimeMs: Date.now() - startTime,
                conversationLanguage: context.language,
                agent: this.name,
                responseLength: response.length,
                userPreferences,
                failureContext: context.availabilityFailureContext,
                bugFixed: 'APOLLO_LANGUAGE_ENFORCEMENT'
            });

            return {
                content: response,
                metadata: {
                    processedAt: new Date().toISOString(),
                    agentType: this.name,
                    confidence: 0.95,
                    processingTimeMs: Date.now() - startTime,
                    action: 'availability_recovery',
                    userPreferences,
                    failureContext: context.availabilityFailureContext,
                    conversationLanguage: context.language, // üö® NEW: Track conversation language
                    languageEnforcementApplied: true // üö® NEW: Confirm language enforcement
                }
            };

        } catch (error) {
            // üö® ENHANCED: Language-aware error logging
            this.logAgentAction('Apollo agent error with language context', {
                error: (error as Error).message,
                conversationLanguage: context.language,
                agent: this.name,
                purpose: 'availability_recovery'
            });
            
            return this.handleAgentError(error as Error, 'handleMessage', message);
        }
    }

    /**
     * üîç INTELLIGENT: Analyze user message for time preferences
     */
    private analyzeUserPreferences(message: string, language: string): any {
        const lowerMessage = message.toLowerCase();
        
        const preferences = {
            timeFlexibility: 'flexible' as 'strict' | 'flexible' | 'very_flexible',
            preferredTimeRange: 'any' as 'morning' | 'afternoon' | 'evening' | 'any',
            acceptsEarlier: true,
            acceptsLater: true,
            specificRequests: [] as string[]
        };

        // Analyze flexibility indicators
        const strictIndicators = ['exact', 'only', 'specifically', 'precisely', 'exactly'];
        const veryFlexibleIndicators = ['any', 'whatever', 'anything', 'flexible', 'open'];
        
        if (strictIndicators.some(indicator => lowerMessage.includes(indicator))) {
            preferences.timeFlexibility = 'strict';
        } else if (veryFlexibleIndicators.some(indicator => lowerMessage.includes(indicator))) {
            preferences.timeFlexibility = 'very_flexible';
        }

        // Analyze time range preferences
        if (lowerMessage.includes('morning') || lowerMessage.includes('—É—Ç—Ä–æ–º') || lowerMessage.includes('jutro')) {
            preferences.preferredTimeRange = 'morning';
        } else if (lowerMessage.includes('afternoon') || lowerMessage.includes('–¥–Ω–µ–º') || lowerMessage.includes('popodne')) {
            preferences.preferredTimeRange = 'afternoon';
        } else if (lowerMessage.includes('evening') || lowerMessage.includes('dinner') || lowerMessage.includes('–≤–µ—á–µ—Ä') || lowerMessage.includes('veƒçer')) {
            preferences.preferredTimeRange = 'evening';
        }

        // Analyze directional preferences
        if (lowerMessage.includes('earlier') || lowerMessage.includes('—Ä–∞–Ω—å—à–µ') || lowerMessage.includes('ranije')) {
            preferences.acceptsLater = false;
        } else if (lowerMessage.includes('later') || lowerMessage.includes('–ø–æ–∑–∂–µ') || lowerMessage.includes('kasnije')) {
            preferences.acceptsEarlier = false;
        }

        // Extract specific requests
        const specificRequests = [];
        if (lowerMessage.includes('quiet') || lowerMessage.includes('—Ç–∏—Ö–æ') || lowerMessage.includes('tiho')) {
            specificRequests.push('quiet_table');
        }
        if (lowerMessage.includes('window') || lowerMessage.includes('–æ–∫–Ω–æ') || lowerMessage.includes('prozor')) {
            specificRequests.push('window_table');
        }
        preferences.specificRequests = specificRequests;

        return preferences;
    }

    /**
     * üîß ENHANCED: Get failure context section for system prompt
     */
    private getFailureContextSection(failureContext?: AvailabilityFailureContext): string {
        if (!failureContext) {
            return `
üö® NO FAILURE CONTEXT:
- Apollo activated without availability failure context
- Request clarification from guest about their original preferences
- Do not proceed with find_alternative_times without proper context`;
        }

        return `
üö® AVAILABILITY FAILURE CONTEXT:
- Original Request: ${failureContext.originalDate} at ${failureContext.originalTime} for ${failureContext.originalGuests} guests
- Failure Reason: ${failureContext.failureReason}
- Detected At: ${failureContext.detectedAt}
- Your Mission: Find excellent alternatives near ${failureContext.originalTime}

üéØ PARAMETERS FOR find_alternative_times:
- date: "${failureContext.originalDate}"
- preferredTime: "${failureContext.originalTime}"
- guests: ${failureContext.originalGuests}

You MUST use these exact parameters when calling find_alternative_times.`;
    }

    /**
     * üó£Ô∏è MULTILINGUAL: Communication guidelines for empathetic responses
     */
    private getCommunicationGuidelines(language: Language): string {
        const guidelines = {
            en: `
üó£Ô∏è COMMUNICATION STYLE (English):
- **Empathetic Opening**: "I understand that ${this.restaurantConfig.openingTime} doesn't work..."
- **Optimistic Transition**: "But I have some excellent alternatives!"
- **Clear Presentation**: "Here are 3 great options close to your preferred time:"
- **Benefit Highlighting**: "This time is actually perfect because..."
- **Selection Guidance**: "Which of these works best for you?"
- **Handoff Preparation**: "Perfect! Let me connect you with Sofia to complete your booking."`,

            ru: `
üó£Ô∏è –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø (–†—É—Å—Å–∫–∏–π):
- **–ü–æ–Ω–∏–º–∞—é—â–µ–µ –Ω–∞—á–∞–ª–æ**: "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç..."
- **–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥**: "–ù–æ —É –º–µ–Ω—è –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã!"
- **–ß–µ—Ç–∫–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è**: "–í–æ—Ç 3 —Ö–æ—Ä–æ—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –±–ª–∏–∑–∫–æ –∫ –∂–µ–ª–∞–µ–º–æ–º—É –≤—Ä–µ–º–µ–Ω–∏:"
- **–ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤**: "–≠—Ç–æ –≤—Ä–µ–º—è –¥–∞–∂–µ –ª—É—á—à–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ..."
- **–ü–æ–º–æ—â—å –≤ –≤—ã–±–æ—Ä–µ**: "–ö–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?"
- **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ–¥–∞—á–µ**: "–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–¥–∞—é –≤–∞—Å –°–æ—Ñ–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."`,

            sr: `
üó£Ô∏è STIL KOMUNIKACIJE (Srpski):
- **Razumevajuƒái poƒçetak**: "Razumem da to vreme ne odgovara..."
- **Optimistiƒçni prelaz**: "Ali imam odliƒçne alternative!"
- **Jasna prezentacija**: "Evo 3 odliƒçne opcije blizu ≈æeljenog vremena:"
- **Isticanje prednosti**: "Ovo vreme je zapravo jo≈° bolje jer..."
- **Pomoƒá u izboru**: "Koja od ovih opcija vam najbolje odgovara?"
- **Priprema za predaju**: "Savr≈°eno! Prebacujem vas na Sofiju da zavr≈°i rezervaciju."`,

            auto: `
üó£Ô∏è COMMUNICATION STYLE (Auto-detect):
- **Empathetic Opening**: Acknowledge disappointment warmly
- **Optimistic Transition**: Present alternatives as opportunities
- **Clear Presentation**: Max 3 options with specific benefits
- **Benefit Highlighting**: Explain why alternatives are good
- **Selection Guidance**: Help guest choose confidently
- **Handoff Preparation**: Smooth transition to Sofia`
        };

        return guidelines[language] || guidelines.auto;
    }

    /**
     * üìÖ ENHANCED: Business hours section with availability context
     */
    private getBusinessHoursSection(): string {
        const openingTime = this.restaurantConfig.openingTime || '09:00';
        const closingTime = this.restaurantConfig.closingTime || '23:00';
        const isOvernight = isOvernightOperation(openingTime, closingTime);

        return `
üïê AVAILABILITY EXPERTISE:
- Operating Hours: ${openingTime} - ${closingTime}${isOvernight ? ' (next day)' : ''}
- Peak Times: Usually 19:00-21:00 (busiest)
- Quiet Times: Early evening 17:00-18:30, late 21:30+
- Weekend Patterns: Busier, book earlier times
${isOvernight ? '- Late Night Advantage: Open until ' + closingTime + ' - great for late diners!' : ''}

üí° ALTERNATIVE BENEFITS TO HIGHLIGHT:
- **Earlier Times**: "More relaxed atmosphere, better service attention"
- **Later Times**: "Quieter, perfect for intimate conversations"
- **Different Days**: "Better availability, same great experience"
- **Peak Avoidance**: "Skip the rush, enjoy a calmer evening"`;
    }

    /**
     * üîß ENHANCED: Get restaurant context for date/time awareness
     */
    private getRestaurantContext() {
        try {
            const timezone = this.restaurantConfig.timezone;
            const restaurantContext = getRestaurantTimeContext(timezone);
            const operatingStatus = getRestaurantOperatingStatus(
                timezone,
                this.restaurantConfig.openingTime || '09:00',
                this.restaurantConfig.closingTime || '23:00'
            );

            return {
                currentDate: restaurantContext.todayDate,
                tomorrowDate: restaurantContext.tomorrowDate,
                currentTime: restaurantContext.displayName,
                dayOfWeek: restaurantContext.dayOfWeek,
                isOpen: operatingStatus.isOpen
            };
        } catch (error) {
            // Fallback to system time if timezone utils fail
            const now = DateTime.now();
            return {
                currentDate: now.toISODate(),
                tomorrowDate: now.plus({ days: 1 }).toISODate(),
                currentTime: now.toFormat('HH:mm'),
                dayOfWeek: now.toFormat('cccc'),
                isOpen: true
            };
        }
    }

    /**
     * üîß GET: Available tools for Apollo agent
     */
    getTools() {
        return agentTools.filter(tool =>
            this.capabilities.includes(tool.function.name)
        );
    }

    /**
     * üéØ INTELLIGENT: Score alternative times based on proximity and preferences
     */
    private scoreAlternative(
        alternative: any,
        originalTime: string,
        userPreferences: any
    ): AlternativeTimeOption {
        const originalHour = parseInt(originalTime.split(':')[0]);
        const originalMinute = parseInt(originalTime.split(':')[1]);
        const altHour = parseInt(alternative.time.split(':')[0]);
        const altMinute = parseInt(alternative.time.split(':')[1]);

        // Calculate proximity in minutes
        const proximityMinutes = Math.abs(
            (altHour * 60 + altMinute) - (originalHour * 60 + originalMinute)
        );

        // Base score starts high and decreases with distance
        let score = 100 - (proximityMinutes / 10);

        // Bonus for matching time range preferences
        const altTimeOfDay = this.getTimeOfDay(alternative.time);
        if (userPreferences.preferredTimeRange === altTimeOfDay) {
            score += 20;
        }

        // Penalty for violating directional preferences
        if (!userPreferences.acceptsEarlier && altHour < originalHour) {
            score -= 30;
        }
        if (!userPreferences.acceptsLater && altHour > originalHour) {
            score -= 30;
        }

        // Bonus for popular/good times
        if (altHour >= 18 && altHour <= 20) {
            score += 10; // Prime dinner time
        }

        return {
            date: alternative.date,
            time: alternative.time,
            availableGuests: alternative.availableGuests || alternative.guests,
            table: alternative.table,
            score: Math.max(0, score),
            proximity: proximityMinutes,
            reason: this.generateAlternativeReason(alternative.time, proximityMinutes),
            timeOfDay: altTimeOfDay
        };
    }

    /**
     * üïê HELPER: Determine time of day category
     */
    private getTimeOfDay(time: string): 'morning' | 'afternoon' | 'evening' {
        const hour = parseInt(time.split(':')[0]);
        
        if (hour < 12) return 'morning';
        if (hour < 17) return 'afternoon';
        return 'evening';
    }

    /**
     * üí° HELPER: Generate reason why an alternative time is good
     */
    private generateAlternativeReason(time: string, proximityMinutes: number): string {
        const hour = parseInt(time.split(':')[0]);
        
        if (proximityMinutes <= 30) {
            return 'Very close to your preferred time';
        } else if (hour >= 17 && hour <= 18) {
            return 'Early dinner - quieter, more intimate';
        } else if (hour >= 21) {
            return 'Late dinner - perfect for a relaxed evening';
        } else if (hour >= 12 && hour <= 14) {
            return 'Lunch time - great for a midday meal';
        } else {
            return 'Available with good service';
        }
    }

    /**
     * üîß COMPATIBILITY: Legacy method support for system integration
     */
    updateInstructions(
        context: string, 
        language: Language, 
        guestHistory?: any | null, 
        isFirstMessage?: boolean, 
        conversationContext?: any
    ): string {
        return this.generateSystemPrompt({
            restaurantId: this.restaurantConfig.id,
            timezone: this.restaurantConfig.timezone,
            language,
            availabilityFailureContext: conversationContext?.availabilityFailureContext
        });
    }

    /**
     * üîß COMPATIBILITY: Legacy greeting method
     */
    getPersonalizedGreeting(
        guestHistory: any | null, 
        language: Language, 
        context: 'hostess' | 'guest', 
        conversationContext?: any
    ): string {
        const greetings = {
            en: "I understand your preferred time isn't available, but I'm here to find you some excellent alternatives! Let me check what we have...",
            ru: "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –æ—Ç–ª–∏—á–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã! –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å...",
            sr: "Razumem da ≈æeljeno vreme nije dostupno, ali tu sam da naƒëem odliƒçne alternative! Hajde da vidimo ≈°ta imamo...",
            hu: "√ârtem, hogy a k√≠v√°nt id≈ëpont nem el√©rhet≈ë, de itt vagyok, hogy kiv√°l√≥ alternat√≠v√°kat tal√°ljak! N√©zz√ºk meg, mit tudunk aj√°nlani...",
            de: "Ich verstehe, dass Ihre bevorzugte Zeit nicht verf√ºgbar ist, aber ich bin hier, um Ihnen ausgezeichnete Alternativen zu finden! Schauen wir mal...",
            fr: "Je comprends que votre heure pr√©f√©r√©e n'est pas disponible, mais je suis l√† pour vous trouver d'excellentes alternatives! Voyons ce que nous avons...",
            es: "Entiendo que su hora preferida no est√° disponible, pero estoy aqu√≠ para encontrarle excelentes alternativas! Veamos qu√© tenemos...",
            it: "Capisco che il suo orario preferito non √® disponibile, ma sono qui per trovarle ottime alternative! Vediamo cosa abbiamo...",
            pt: "Entendo que seu hor√°rio preferido n√£o est√° dispon√≠vel, mas estou aqui para encontrar excelentes alternativas! Vamos ver o que temos...",
            nl: "Ik begrijp dat uw gewenste tijd niet beschikbaar is, maar ik ben hier om uitstekende alternatieven te vinden! Laten we kijken wat we hebben...",
            auto: "I understand your preferred time isn't available, but I'm here to find you some excellent alternatives! Let me check what we have..."
        };

        return greetings[language] || greetings.auto;
    }
}

export default ApolloAgent;
