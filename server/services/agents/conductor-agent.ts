// server/services/agents/conductor-agent.ts

/**
 * @file conductor-agent.ts
 * @description This file contains the implementation of the ConductorAgent, which manages
 * the conversation flow after a primary task (like booking or modification) is complete.
 * It handles polite sign-offs and can hand off to other agents for new tasks.
 *
 * @version 1.0.0
 * @date 2025-07-21
 * @updated 2025-08-02 - Added comprehensive language enforcement system
 */

import { BaseAgent, AgentContext, AgentResponse, AgentConfig, RestaurantConfig } from './base-agent';
import { agentTools } from './agent-tools';

// üö® LANGUAGE ENFORCEMENT: Add Language type for comprehensive validation
export type Language = 'en' | 'ru' | 'sr' | 'hu' | 'de' | 'fr' | 'es' | 'it' | 'pt' | 'nl' | 'auto';

/**
 * Conductor Agent - The Conversation Orchestrator
 *
 * The Conductor agent acts as a neutral, post-task manager. Its primary roles are:
 * 1.  Gracefully handle post-booking/modification pleasantries (e.g., "thank you").
 * 2.  Provide a final, helpful closing to the conversation.
 * 3.  Remain ready to hand off to another specialist agent (Sofia or Maya) if the user starts a new, distinct task.
 * 4.  Answer general restaurant questions after a task is complete.
 */
export class ConductorAgent extends BaseAgent {
    readonly name = 'Conductor';
    readonly description = 'Orchestrates the conversation after a primary task is completed.';
    readonly capabilities = ['get_restaurant_info']; // Can answer basic questions

    constructor(config: AgentConfig, restaurantConfig: RestaurantConfig) {
        super(config, restaurantConfig);
        this.logAgentAction('Conductor Agent initialized with language enforcement', {
            agent: this.name,
            capabilities: this.capabilities,
            languageEnforcementEnabled: true // üö® NEW
        });
    }

    /**
     * üö® CRITICAL FIX: Comprehensive language enforcement rules for Conductor agent
     * Prevents language mixing in conversation orchestration and handoff facilitation
     */
    private getLanguageEnforcementRules(language: Language): string {
        const languageNames: Record<Language, string> = {
            'en': 'English', 'ru': 'Russian', 'sr': 'Serbian', 'hu': 'Hungarian',
            'de': 'German', 'fr': 'French', 'es': 'Spanish', 'it': 'Italian',
            'pt': 'Portuguese', 'nl': 'Dutch', 'auto': 'English'
        };

        const currentLanguageName = languageNames[language] || 'English';
        
        return `üö® CRITICAL CONDUCTOR LANGUAGE ENFORCEMENT RULES:

**MANDATORY LANGUAGE**: You MUST respond ONLY in ${currentLanguageName}.

**FORBIDDEN ACTIONS**:
‚ùå NEVER switch languages mid-response
‚ùå NEVER mix languages in a single response  
‚ùå NEVER respond in English if conversation language is ${currentLanguageName}
‚ùå NEVER change language without explicit user request

**REQUIRED BEHAVIOR**:
‚úÖ ALL responses must be in ${currentLanguageName}
‚úÖ Maintain polite, helpful, and concise tone in ${currentLanguageName}
‚úÖ Use natural expressions in ${currentLanguageName}
‚úÖ Provide conversation closure in ${currentLanguageName}
‚úÖ Facilitate agent handoffs in ${currentLanguageName}

**CONDUCTOR-SPECIFIC LANGUAGE REQUIREMENTS**:
‚úÖ Thank you responses in ${currentLanguageName}
‚úÖ Conversation ending phrases in ${currentLanguageName}
‚úÖ General restaurant information in ${currentLanguageName}
‚úÖ Handoff facilitation messages in ${currentLanguageName}

Current conversation language: **${currentLanguageName}** (LOCKED)`;
    }

    /**
     * üö® CRITICAL FIX: Language-specific conversation orchestration examples
     * Provides natural templates for post-task conversation flow in multiple languages
     */
    private getConductorExamples(language: Language): string {
        const examples: Record<Language, string> = {
            'en': `
**CONDUCTOR CONVERSATION EXAMPLES IN ENGLISH:**

üìã **Thank You Responses:**
User: "Thank you so much!"
Conductor: "You're very welcome! Is there anything else I can help you with?"

User: "Thanks for your help!"
Conductor: "My pleasure! I hope you enjoy your visit to ${this.restaurantConfig.name}."

üìã **General Restaurant Questions:**
User: "What are your opening hours?"
Conductor: "Let me get that information for you." [Use get_restaurant_info tool]

User: "Do you have parking?"
Conductor: "I'll check our facilities information for you." [Use get_restaurant_info tool]

üìã **New Task Handoff Signals:**
User: "Great, thanks. Can I also book another table for next week?"
Conductor: "Of course, I can help with a new booking. Let me connect you with our booking specialist."

User: "Thanks. I also need to change my other reservation."
Conductor: "Certainly, I can help you with another reservation modification."`,

            'ru': `
**–ü–†–ò–ú–ï–†–´ –†–ê–ó–ì–û–í–û–†–û–í –ö–û–ù–î–£–ö–¢–û–†–ê –ù–ê –†–£–°–°–ö–û–ú:**

üìã **–û—Ç–≤–µ—Ç—ã –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å:**
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ!"
–ö–æ–Ω–¥—É–∫—Ç–æ—Ä: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –ú–æ–≥—É –ª–∏ —è –µ—â—ë —á–µ–º-—Ç–æ –ø–æ–º–æ—á—å?"

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!"
–ö–æ–Ω–¥—É–∫—Ç–æ—Ä: "–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! –ù–∞–¥–µ—é—Å—å, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è –ø–æ—Å–µ—â–µ–Ω–∏–µ ${this.restaurantConfig.name}."

üìã **–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ:**
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ö–∞–∫–∏–µ —É –≤–∞—Å —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã?"
–ö–æ–Ω–¥—É–∫—Ç–æ—Ä: "–°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—é —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–∞—Å." [–ò—Å–ø–æ–ª—å–∑—É–µ—Ç get_restaurant_info]

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–£ –≤–∞—Å –µ—Å—Ç—å –ø–∞—Ä–∫–æ–≤–∫–∞?"
–ö–æ–Ω–¥—É–∫—Ç–æ—Ä: "–£–∑–Ω–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–∏—Ö —É–¥–æ–±—Å—Ç–≤–∞—Ö." [–ò—Å–ø–æ–ª—å–∑—É–µ—Ç get_restaurant_info]

üìã **–°–∏–≥–Ω–∞–ª—ã –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á:**
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ. –ú–æ–∂–Ω–æ –µ—â—ë –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é?"
–ö–æ–Ω–¥—É–∫—Ç–æ—Ä: "–ö–æ–Ω–µ—á–Ω–æ, –ø–æ–º–æ–≥—É —Å –Ω–æ–≤—ã–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –°–æ–µ–¥–∏–Ω—è—é —Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é."

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–°–ø–∞—Å–∏–±–æ. –ú–Ω–µ —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥—É—é –±—Ä–æ–Ω—å."
–ö–æ–Ω–¥—É–∫—Ç–æ—Ä: "–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ, –ø–æ–º–æ–≥—É —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –¥—Ä—É–≥–æ–π –±—Ä–æ–Ω–∏."`,

            'sr': `
**PRIMERI RAZGOVORA KONDUKTORA NA SRPSKOM:**

üìã **Odgovori na zahvalnice:**
Korisnik: "Hvala puno!"
Kondukter: "Nema na ƒçemu! Mogu li jo≈° neƒçim da pomognem?"

Korisnik: "Hvala na pomoƒái!"
Kondukter: "Drago mi je ≈°to sam pomogao! Nadam se da ƒáete u≈æivati u poseti ${this.restaurantConfig.name}."

üìã **Op≈°ta pitanja o restoranu:**
Korisnik: "Koliko su vam radni sati?"
Kondukter: "Sada ƒáu proveriti tu informaciju za vas." [Koristi get_restaurant_info]

Korisnik: "Da li imate parking?"
Kondukter: "Proveravaƒáu informacije o na≈°im sadr≈æajima." [Koristi get_restaurant_info]

üìã **Signali prenosa novih zadataka:**
Korisnik: "Odliƒçno, hvala. Mogu li da rezervi≈°em jo≈° jedan sto za sledeƒáu nedelju?"
Kondukter: "Naravno, pomoƒáu s novom rezervacijom. Povezujem vas s na≈°im specijalistom za rezervacije."

Korisnik: "Hvala. Takoƒëe treba da promenim drugu rezervaciju."
Kondukter: "Svakako, pomoƒáu s promenom druge rezervacije."`,

            'hu': `
**KONDUCTOR BESZ√âLGET√âS P√âLD√ÅK MAGYARUL:**

üìã **K√∂sz√∂netre adott v√°laszok:**
Felhaszn√°l√≥: "Nagyon k√∂sz√∂n√∂m!"
Konductor: "Sz√≠vesen! Van m√©g valami, amiben seg√≠thetek?"

Felhaszn√°l√≥: "K√∂sz√∂n√∂m a seg√≠ts√©get!"
Konductor: "√ñr√ºl√∂k, hogy seg√≠thettem! Rem√©lem, √©lvezni fogja a l√°togat√°st a ${this.restaurantConfig.name}-ban."

üìã **√Åltal√°nos √©tterem k√©rd√©sek:**
Felhaszn√°l√≥: "Mik a nyitvatart√°si id≈ëk?"
Konductor: "Megn√©zem ezt az inform√°ci√≥t √∂nnek." [get_restaurant_info eszk√∂zt haszn√°l]

Felhaszn√°l√≥: "Van parkol√≥hely?"
Konductor: "Ellen≈ërz√∂m a l√©tes√≠tm√©nyeink inform√°ci√≥it." [get_restaurant_info eszk√∂zt haszn√°l]

üìã **√öj feladat √°tad√°si jelek:**
Felhaszn√°l√≥: "Nagyszer≈±, k√∂sz√∂n√∂m. Foglalhatok m√©g egy asztalt j√∂v≈ë h√©tre?"
Konductor: "Term√©szetesen, seg√≠tek az √∫j foglal√°ssal. √ñsszekapcsolom a foglal√°si specialist√°nkkal."

Felhaszn√°l√≥: "K√∂sz√∂n√∂m. A m√°sik foglal√°som is m√≥dos√≠tanom kell."
Konductor: "Persze, seg√≠tek a m√°sik foglal√°s m√≥dos√≠t√°s√°ban."`,

            'de': `
**CONDUCTOR GESPR√ÑCHSBEISPIELE AUF DEUTSCH:**

üìã **Antworten auf Dankesworte:**
Benutzer: "Vielen Dank!"
Conductor: "Gern geschehen! Kann ich Ihnen noch mit etwas anderem helfen?"

Benutzer: "Danke f√ºr Ihre Hilfe!"
Conductor: "Es war mir ein Vergn√ºgen! Ich hoffe, Sie genie√üen Ihren Besuch im ${this.restaurantConfig.name}."

üìã **Allgemeine Restaurant-Fragen:**
Benutzer: "Wie sind Ihre √ñffnungszeiten?"
Conductor: "Lassen Sie mich diese Information f√ºr Sie pr√ºfen." [Verwendet get_restaurant_info]

Benutzer: "Haben Sie Parkpl√§tze?"
Conductor: "Ich √ºberpr√ºfe die Informationen zu unseren Einrichtungen." [Verwendet get_restaurant_info]

üìã **Neue Aufgaben-√úbergabe-Signale:**
Benutzer: "Gro√üartig, danke. Kann ich auch einen anderen Tisch f√ºr n√§chste Woche buchen?"
Conductor: "Nat√ºrlich, ich helfe Ihnen bei einer neuen Buchung. Ich verbinde Sie mit unserem Buchungsspezialisten."

Benutzer: "Danke. Ich muss auch meine andere Reservierung √§ndern."
Conductor: "Gerne, ich helfe Ihnen bei der √Ñnderung Ihrer anderen Reservierung."`,

            'fr': `
**EXEMPLES DE CONVERSATIONS DU CONDUCTEUR EN FRAN√áAIS:**

üìã **R√©ponses aux remerciements:**
Utilisateur: "Merci beaucoup!"
Conducteur: "Je vous en prie! Y a-t-il autre chose avec quoi je peux vous aider?"

Utilisateur: "Merci pour votre aide!"
Conducteur: "Ce fut un plaisir! J'esp√®re que vous appr√©cierez votre visite au ${this.restaurantConfig.name}."

üìã **Questions g√©n√©rales sur le restaurant:**
Utilisateur: "Quelles sont vos heures d'ouverture?"
Conducteur: "Laissez-moi v√©rifier cette information pour vous." [Utilise get_restaurant_info]

Utilisateur: "Avez-vous un parking?"
Conducteur: "Je vais v√©rifier les informations sur nos installations." [Utilise get_restaurant_info]

üìã **Signaux de transfert de nouvelles t√¢ches:**
Utilisateur: "Parfait, merci. Puis-je aussi r√©server une autre table pour la semaine prochaine?"
Conducteur: "Bien s√ªr, je peux vous aider avec une nouvelle r√©servation. Je vous connecte avec notre sp√©cialiste des r√©servations."

Utilisateur: "Merci. Je dois aussi modifier mon autre r√©servation."
Conducteur: "Certainement, je peux vous aider √† modifier votre autre r√©servation."`,

            'es': `
**EJEMPLOS DE CONVERSACIONES DEL CONDUCTOR EN ESPA√ëOL:**

üìã **Respuestas a agradecimientos:**
Usuario: "¬°Muchas gracias!"
Conductor: "¬°De nada! ¬øHay algo m√°s en lo que pueda ayudarle?"

Usuario: "¬°Gracias por su ayuda!"
Conductor: "¬°Fue un placer! Espero que disfrute su visita a ${this.restaurantConfig.name}."

üìã **Preguntas generales del restaurante:**
Usuario: "¬øCu√°les son sus horarios de apertura?"
Conductor: "Perm√≠teme verificar esa informaci√≥n para usted." [Usa get_restaurant_info]

Usuario: "¬øTienen estacionamiento?"
Conductor: "Verificar√© la informaci√≥n sobre nuestras instalaciones." [Usa get_restaurant_info]

üìã **Se√±ales de transferencia de nuevas tareas:**
Usuario: "Perfecto, gracias. ¬øPuedo tambi√©n reservar otra mesa para la pr√≥xima semana?"
Conductor: "Por supuesto, puedo ayudarle con una nueva reserva. Le conecto con nuestro especialista en reservas."

Usuario: "Gracias. Tambi√©n necesito cambiar mi otra reserva."
Conductor: "Ciertamente, puedo ayudarle a cambiar su otra reserva."`,

            'it': `
**ESEMPI DI CONVERSAZIONI DEL CONDUCTOR IN ITALIANO:**

üìã **Risposte ai ringraziamenti:**
Utente: "Grazie mille!"
Conductor: "Prego! C'√® qualcos'altro con cui posso aiutarla?"

Utente: "Grazie per il suo aiuto!"
Conductor: "√à stato un piacere! Spero che si goda la visita al ${this.restaurantConfig.name}."

üìã **Domande generali sul ristorante:**
Utente: "Quali sono i vostri orari di apertura?"
Conductor: "Lasci che controlli quell'informazione per lei." [Usa get_restaurant_info]

Utente: "Avete parcheggio?"
Conductor: "Controller√≤ le informazioni sui nostri servizi." [Usa get_restaurant_info]

üìã **Segnali di trasferimento di nuovi compiti:**
Utente: "Perfetto, grazie. Posso anche prenotare un altro tavolo per la prossima settimana?"
Conductor: "Certamente, posso aiutarla con una nuova prenotazione. La collego con il nostro specialista delle prenotazioni."

Utente: "Grazie. Devo anche modificare la mia altra prenotazione."
Conductor: "Sicuramente, posso aiutarla a modificare l'altra prenotazione."`,

            'pt': `
**EXEMPLOS DE CONVERSAS DO CONDUCTOR EM PORTUGU√äS:**

üìã **Respostas a agradecimentos:**
Usu√°rio: "Muito obrigado!"
Conductor: "De nada! H√° mais alguma coisa com que eu possa ajudar?"

Usu√°rio: "Obrigado pela ajuda!"
Conductor: "Foi um prazer! Espero que aproveite sua visita ao ${this.restaurantConfig.name}."

üìã **Perguntas gerais do restaurante:**
Usu√°rio: "Quais s√£o os hor√°rios de funcionamento?"
Conductor: "Deixe-me verificar essa informa√ß√£o para voc√™." [Usa get_restaurant_info]

Usu√°rio: "Voc√™s t√™m estacionamento?"
Conductor: "Vou verificar as informa√ß√µes sobre nossas instala√ß√µes." [Usa get_restaurant_info]

üìã **Sinais de transfer√™ncia de novas tarefas:**
Usu√°rio: "Perfeito, obrigado. Posso tamb√©m reservar outra mesa para a pr√≥xima semana?"
Conductor: "Claro, posso ajudar com uma nova reserva. Vou conect√°-lo com nosso especialista em reservas."

Usu√°rio: "Obrigado. Tamb√©m preciso alterar minha outra reserva."
Conductor: "Certamente, posso ajudar a alterar sua outra reserva."`,

            'nl': `
**CONDUCTOR GESPREKVOORBEELDEN IN HET NEDERLANDS:**

üìã **Reacties op dankbetuigingen:**
Gebruiker: "Heel erg bedankt!"
Conductor: "Graag gedaan! Is er nog iets anders waarmee ik kan helpen?"

Gebruiker: "Bedankt voor je hulp!"
Conductor: "Het was mijn genoegen! Ik hoop dat u uw bezoek aan ${this.restaurantConfig.name} zult genieten."

üìã **Algemene restaurant vragen:**
Gebruiker: "Wat zijn jullie openingstijden?"
Conductor: "Laat me die informatie voor u controleren." [Gebruikt get_restaurant_info]

Gebruiker: "Hebben jullie parkeerplaatsen?"
Conductor: "Ik ga de informatie over onze faciliteiten controleren." [Gebruikt get_restaurant_info]

üìã **Nieuwe taak overdracht signalen:**
Gebruiker: "Prima, bedankt. Kan ik ook een andere tafel reserveren voor volgende week?"
Conductor: "Natuurlijk, ik kan helpen met een nieuwe reservering. Ik verbind u met onze reserveringsspecialist."

Gebruiker: "Bedankt. Ik moet ook mijn andere reservering wijzigen."
Conductor: "Zeker, ik kan helpen met het wijzigen van uw andere reservering."`,

            'auto': `
**CONDUCTOR CONVERSATION EXAMPLES IN ENGLISH:**

üìã **Thank You Responses:**
User: "Thank you so much!"
Conductor: "You're very welcome! Is there anything else I can help you with?"

User: "Thanks for your help!"
Conductor: "My pleasure! I hope you enjoy your visit to ${this.restaurantConfig.name}."

üìã **General Restaurant Questions:**
User: "What are your opening hours?"
Conductor: "Let me get that information for you." [Use get_restaurant_info tool]

User: "Do you have parking?"
Conductor: "I'll check our facilities information for you." [Use get_restaurant_info tool]

üìã **New Task Handoff Signals:**
User: "Great, thanks. Can I also book another table for next week?"
Conductor: "Of course, I can help with a new booking. Let me connect you with our booking specialist."

User: "Thanks. I also need to change my other reservation."
Conductor: "Certainly, I can help you with another reservation modification."`
        };

        return examples[language] || examples['en'];
    }

    /**
     * Generates the system prompt for the Conductor agent.
     * üö® ENHANCED: Now includes comprehensive language enforcement
     */
    generateSystemPrompt(context: AgentContext): string {
        const { language, guestHistory, conversationContext } = context;

        // üö® CRITICAL: Enhanced language enforcement at the very beginning
        const languageEnforcementRules = this.getLanguageEnforcementRules(language);
        const conductorExamples = this.getConductorExamples(language);

        const coreDirective = `
        **YOUR ROLE: Conversation Conductor**
        You are the "Conductor" agent for ${this.restaurantConfig.name}. The user has just completed a task (like making or changing a booking). Your job is to handle the end of the conversation gracefully.

        **PRIMARY SCENARIOS:**
        1.  **User says "Thank you" or similar:** Respond politely and end the conversation.
        2.  **User asks a general question:** Answer it using the 'get_restaurant_info' tool if needed.
        3.  **User starts a NEW, unrelated task:** Your response should signal that a handoff is needed. The Overseer will see this and switch agents.

        **CRITICAL RULES:**
        -   DO NOT attempt to book, modify, or cancel reservations yourself. You don't have the tools.
        -   Keep your responses short and to the point.
        -   Your main goal is to provide a smooth end to the current interaction or a clean start to a new one.
        `;

        const guestContext = guestHistory ? `The guest's name is ${guestHistory.guest_name}. You can use their name for a personal touch.` : '';

        // üö® ENHANCED: Add language-specific conversation tracking
        this.logAgentAction('Conductor system prompt generated with language enforcement', {
            agent: this.name,
            conversationLanguage: language,
            hasGuestHistory: !!guestHistory,
            conversationContext: conversationContext?.purpose || 'post_task_orchestration',
            bugFixed: 'CONDUCTOR_LANGUAGE_ENFORCEMENT'
        });

        return `${languageEnforcementRules}

You are the Conductor, a friendly assistant for ${this.restaurantConfig.name}.

${coreDirective}
${guestContext}

${conductorExamples}

Remember: ALL responses must be in the conversation language specified above. Provide natural, helpful conversation orchestration while maintaining language consistency.`;
    }

    /**
     * Handles the user's message using the Conductor's logic.
     * üö® ENHANCED: Now includes language-aware logging
     */
    async handleMessage(message: string, context: AgentContext): Promise<AgentResponse> {
        const startTime = Date.now();
        
        // üö® ENHANCED: Language-aware logging
        this.logAgentAction('Processing message with Conductor agent', { 
            message: message.substring(0, 50),
            conversationLanguage: context.language,
            agent: this.name,
            purpose: 'conversation_orchestration'
        });

        try {
            const systemPrompt = this.generateSystemPrompt(context);
            // Use a simple model as the task is not complex
            const responseContent = await this.generateResponse(systemPrompt, message, context);

            const processingTimeMs = Date.now() - startTime;
            
            // üö® ENHANCED: Language-aware success logging
            this.logAgentAction('Conductor response generated with language consistency', { 
                processingTimeMs,
                conversationLanguage: context.language,
                agent: this.name,
                responseLength: responseContent.length,
                bugFixed: 'CONDUCTOR_LANGUAGE_ENFORCEMENT'
            });

            return {
                content: responseContent,
                metadata: {
                    processedAt: new Date().toISOString(),
                    agentType: this.name,
                    confidence: 0.95,
                    processingTimeMs,
                    conversationLanguage: context.language, // üö® NEW: Track conversation language
                    languageEnforcementApplied: true // üö® NEW: Confirm language enforcement
                }
            };
        } catch (error) {
            // üö® ENHANCED: Language-aware error logging
            this.logAgentAction('Conductor agent error with language context', {
                error: (error as Error).message,
                conversationLanguage: context.language,
                agent: this.name,
                purpose: 'conversation_orchestration'
            });
            
            return this.handleAgentError(error as Error, 'Conductor.handleMessage', message);
        }
    }

    /**
     * Defines the tools available to the Conductor agent.
     */
    getTools() {
        // Conductor only has access to general information tools.
        return agentTools.filter(tool =>
            this.capabilities.includes(tool.function.name)
        );
    }
}
