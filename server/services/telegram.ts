import TelegramBot from 'node-telegram-bot-api';
import { storage } from '../storage';
import { 
    ActiveConversation, 
    DefaultResponseFormatter, 
    Language, 
    ConversationFlow,
    type NameConflictDetails // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º NameConflictDetails
} from './conversation-manager';
import { OpenAIServiceImpl } from './openai';
import { getAvailableTimeSlots, AvailabilitySlot } from './availability.service';
import { 
    createTelegramReservation, 
    generateTelegramConfirmationMessage,
    type CreateTelegramReservationResult 
} from './telegram_booking';
import type { Restaurant } from '@shared/schema';

const activeBots = new Map<number, TelegramBot>();
const activeConversations = new Map<number, ActiveConversation>();

interface TelegramLocalizedStrings {
  welcomeMessage: (restaurantName: string) => string;
  helpMessage: string;
  cancelMessage: string;
  genericError: string;
  bookingFailedOfferAlternatives: string;
  alternativesFound: (alternatives: string) => string;
  noAlternativesTryAgain: string;
  slotUnavailableAnymore: string;
  errorCreatingReservation: string;
  errorCheckingAvailability: string;
  errorHandlingAlternative: string;
  botNotConfigured: string;
  telegramTestSuccess: (botUsername: string) => string;
  telegramTestFailed: (errorMessage: string) => string;
  alternativesNumericalChoicePrompt: string;
  nameClarificationPrompt: (dbName: string, requestName: string) => string;
  useNewNameButton: (requestName: string) => string;
  useDbNameButton: (dbName: string) => string;
  pleaseUseButtons: string;
  nameConfirmationUsed: (name: string) => string;
}

const telegramLocaleStrings: Record<Language, TelegramLocalizedStrings> = {
  en: {
    welcomeMessage: (restaurantName) => `üåü Hello! Welcome to ${restaurantName}! I'm Sofia, and I'm absolutely delighted to help you secure the perfect table! ‚ú®\n\nI can assist you with making a reservation right now. Just let me know:\n‚Ä¢ When you'd like to dine üìÖ\n‚Ä¢ How many guests will be joining you üë•\n‚Ä¢ Your preferred time ‚è∞\n\nI'll take care of everything else! ü•Ç\n\nWhat sounds good to you?`,
    helpMessage: `üÜò **How I can help you:**\n\nI'm Sofia, your restaurant assistant! I can help you:\n\n‚úÖ Make reservations\n‚úÖ Check table availability\n‚úÖ Find alternative times\n‚úÖ Answer questions about dining\n\n**Just tell me:**\n‚Ä¢ What date you'd like to visit\n‚Ä¢ Your preferred time\n‚Ä¢ How many people\n‚Ä¢ Your name\n\nI'll handle the rest!\n\n**Commands:**\n/start - Start fresh conversation\n/help - Show this help\n/cancel - Cancel current booking process\n\nReady to make a reservation? Just tell me what you need! üòä`,
    cancelMessage: "No worries! I've cleared our conversation. Feel free to start fresh whenever you're ready to make a reservation! üòä",
    genericError: "I apologize for the technical hiccup! I'm Sofia. How can I help you with a reservation today? üòä",
    bookingFailedOfferAlternatives: "I'm sorry, but that time slot isn't available anymore. ",
    alternativesFound: (alternatives) => `Here are some great alternatives:\n\n${alternatives}`,
    noAlternativesTryAgain: "Would you like to try a different date or time? I'm here to help find the perfect spot for you! üìÖ",
    slotUnavailableAnymore: "I'm sorry, but that time slot just became unavailable. Let me check for other options... üîÑ",
    errorCreatingReservation: "I encountered a small issue while confirming your reservation. Let me try again in just a moment!",
    errorCheckingAvailability: "Sorry, I couldn't check availability right now. Please try again in a moment.",
    errorHandlingAlternative: "Let me help you find another option. What time would you prefer?",
    botNotConfigured: "Telegram bot is not configured or enabled for this restaurant.",
    telegramTestSuccess: (botUsername) => `Successfully connected to Telegram bot: @${botUsername}`,
    telegramTestFailed: (errorMessage) => `Failed to connect to Telegram bot: ${errorMessage}`,
    alternativesNumericalChoicePrompt: `\n\nWhich option works for you? Just reply with the number! üéØ`,
    nameClarificationPrompt: (dbName, requestName) => `I see you've previously booked as '${dbName}'. For this new reservation, would you like to use the name '${requestName}' or keep '${dbName}'?`,
    useNewNameButton: (requestName) => `Use name: '${requestName}'`,
    useDbNameButton: (dbName) => `Use name: '${dbName}'`,
    pleaseUseButtons: "Please use the buttons above to make your choice.",
    nameConfirmationUsed: (name) => `Okay, using name: ${name}.`,
  },
  ru: {
    welcomeMessage: (restaurantName) => `üåü –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ${restaurantName}! –Ø –°–æ—Ñ–∏—è, –∏ —è –æ—á–µ–Ω—å —Ä–∞–¥–∞ –ø–æ–º–æ—á—å –≤–∞–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–∏–∫! ‚ú®\n\n–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ:\n‚Ä¢ –ö–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ—É–∂–∏–Ω–∞—Ç—å üìÖ\n‚Ä¢ –°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π –±—É–¥–µ—Ç —Å –≤–∞–º–∏ üë•\n‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è ‚è∞\n\n–Ø –ø–æ–∑–∞–±–æ—á—É—Å—å –æ–±–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–º! ü•Ç\n\n–ß—Ç–æ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?`,
    helpMessage: `üÜò **–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:**\n\n–Ø –°–æ—Ñ–∏—è, –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n\n‚úÖ –°–¥–µ–ª–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–∏–∫–æ–≤\n‚úÖ –ù–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è\n‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ\n\n**–ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ:**\n‚Ä¢ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–∏–π—Ç–∏\n‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫\n‚Ä¢ –í–∞—à–µ –∏–º—è\n\n–Ø —Å–¥–µ–ª–∞—é –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ!\n\n**–ö–æ–º–∞–Ω–¥—ã:**\n/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\n–ì–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ? –ü—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ! üòä`,
    cancelMessage: "–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º! –Ø –æ—á–∏—Å—Ç–∏–ª–∞ –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ! üòä",
    genericError: "–ü—Ä–∏–Ω–æ—à—É –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –Ω–µ–ø–æ–ª–∞–¥–∫—É! –Ø –°–æ—Ñ–∏—è. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–µ–≥–æ–¥–Ω—è? üòä",
    bookingFailedOfferAlternatives: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. ",
    alternativesFound: (alternatives) => `–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–ª–∏—á–Ω—ã—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤:\n\n${alternatives}`,
    noAlternativesTryAgain: "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è? –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤–∞—Å! üìÖ",
    slotUnavailableAnymore: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã... üîÑ",
    errorCreatingReservation: "–Ø —Å—Ç–æ–ª–∫–Ω—É–ª–∞—Å—å —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–≥–Ω–æ–≤–µ–Ω–∏–µ!",
    errorCheckingAvailability: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –º–µ—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–≥–Ω–æ–≤–µ–Ω–∏–µ.",
    errorHandlingAlternative: "–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç. –ö–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã –±—ã –ø—Ä–µ–¥–ø–æ—á–ª–∏?",
    botNotConfigured: "–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.",
    telegramTestSuccess: (botUsername) => `–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—É: @${botUsername}`,
    telegramTestFailed: (errorMessage) => `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—É: ${errorMessage}`,
    alternativesNumericalChoicePrompt: `\n\n–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç? –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º! üéØ`,
    nameClarificationPrompt: (dbName, requestName) => `–Ø –≤–∏–∂—É, —á—Ç–æ —Ä–∞–Ω–µ–µ –≤—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥ –∏–º–µ–Ω–µ–º '${dbName}'. –î–ª—è —ç—Ç–æ–≥–æ –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è '${requestName}' –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å '${dbName}'?`,
    useNewNameButton: (requestName) => `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '${requestName}'`,
    useDbNameButton: (dbName) => `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '${dbName}'`,
    pleaseUseButtons: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ.",
    nameConfirmationUsed: (name) => `–•–æ—Ä–æ—à–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è: ${name}.`,
  },
};

async function handleMessage(bot: TelegramBot, restaurantId: number, chatId: number, text: string, restaurant: Restaurant) {
  let conversation = activeConversations.get(chatId);
  let currentLang: Language = 'en';
  const restaurantName = restaurant.name || (currentLang === 'ru' ? "–ù–∞—à –†–µ—Å—Ç–æ—Ä–∞–Ω" : "Our Restaurant");

  if (!conversation) {
    const aiService = new OpenAIServiceImpl();
    const formatter = new DefaultResponseFormatter();
    if (/[\u0400-\u04FF]/.test(text)) {
        currentLang = 'ru';
    }
    conversation = new ActiveConversation(aiService, formatter, [], {}, currentLang);
    activeConversations.set(chatId, conversation);
    console.log(`üéØ [Sofia AI] Started new conversation for chat ${chatId} with initial language: ${currentLang}`);
  } else {
    currentLang = conversation.getConversationFlow().currentLanguage;
  }
  (conversation.responseFormatter as DefaultResponseFormatter).setLanguage(currentLang);

  try {
    console.log(`üì± [Sofia AI] Processing message from ${chatId} (lang: ${currentLang}): "${text}"`);

    if (conversation.getConversationFlow().stage === 'awaiting_name_choice' && !text.startsWith('/')) {
        await bot.sendMessage(chatId, telegramLocaleStrings[currentLang].pleaseUseButtons);
        return;
    }

    const responseFromConversationManager = await conversation.handleMessage(text, restaurantName);
    currentLang = conversation.getConversationFlow().currentLanguage; // –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ—Å–ª–µ AI, –æ–Ω –º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    const locale = telegramLocaleStrings[currentLang];

    const availabilityCheck = conversation.shouldCheckAvailability();

    if (availabilityCheck.needsCheck && availabilityCheck.date) {
      console.log(`üîç [Sofia AI] Checking availability for ${availabilityCheck.date} with ${availabilityCheck.guests} guests (lang: ${currentLang})`);
      try {
        const availableSlots = await getAvailableTimeSlots(
          restaurantId, availabilityCheck.date, availabilityCheck.guests || 2,
          { maxResults: 1, lang: currentLang }
        );
        const hasAvailability = availableSlots.length > 0;
        console.log(`üìä [Sofia AI] Availability check result: ${hasAvailability ? 'Available' : 'Fully booked'}`);
        const availabilityResponseText = conversation.handleAvailabilityResult(hasAvailability);
        await bot.sendMessage(chatId, availabilityResponseText);
        return;
      } catch (error) {
        console.error('‚ùå [Sofia AI] Error checking availability:', error);
        await bot.sendMessage(chatId, locale.errorCheckingAvailability);
        return;
      }
    }

    const flow = conversation.getConversationFlow();
    console.log(`üîç [Sofia AI] Current booking info (lang: ${currentLang}):`, flow.collectedInfo, `Stage: ${flow.stage}`);

    if (hasCompleteBookingInfo(flow.collectedInfo) && 
        (flow.stage === 'confirming' || flow.stage === 'collecting') && // –î–æ–±–∞–≤–ª–µ–Ω–æ 'collecting', —Ç.–∫. –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—è –º—ã –º–æ–∂–µ–º –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã
        flow.stage !== 'awaiting_name_choice' // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –∂–¥–µ–º –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–∏
    ) {
      console.log(`üéØ [Sofia AI] All booking info collected, attempting reservation (lang: ${currentLang})`);
      try {
        const result: CreateTelegramReservationResult = await createTelegramReservation(
          restaurantId, flow.collectedInfo.date!, flow.collectedInfo.time!,
          flow.collectedInfo.guests!, flow.collectedInfo.name!, flow.collectedInfo.phone!,
          chatId.toString(), flow.collectedInfo.special_requests, currentLang
          // confirmedName –∑–¥–µ—Å—å –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º, —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
        );

        if (result.status === 'created' && result.success && result.reservation) {
          const confirmationMessage = generateTelegramConfirmationMessage(
            result.reservation, flow.collectedInfo.name!, result.table?.name,
            restaurantName, currentLang
          );
          await bot.sendMessage(chatId, confirmationMessage);
          activeConversations.delete(chatId);
          console.log(`‚úÖ [Sofia AI] Reservation confirmed and conversation cleared for chat ${chatId}`);
          return;
        } else if (result.status === 'name_mismatch_clarification_needed' && result.nameConflict) {
          console.log(`[Sofia AI] Name mismatch for guest ${result.nameConflict.guestId}. DB: '${result.nameConflict.dbName}', Request: '${result.nameConflict.requestName}'`);

          conversation.setAwaitingNameChoice(result.nameConflict);

          const messageText = locale.nameClarificationPrompt(result.nameConflict.dbName, result.nameConflict.requestName);
          const inlineKeyboard = {
            inline_keyboard: [
              [
                { text: locale.useNewNameButton(result.nameConflict.requestName), callback_data: `confirm_name:new:${result.nameConflict.telegramUserId}` },
                { text: locale.useDbNameButton(result.nameConflict.dbName), callback_data: `confirm_name:db:${result.nameConflict.telegramUserId}` }
              ]
            ]
          };
          await bot.sendMessage(chatId, messageText, { reply_markup: inlineKeyboard });
          return;
        } else { // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –æ—Ç createTelegramReservation
          console.log(`‚ö†Ô∏è [Sofia AI] Booking failed: ${result.message}, offering alternatives (lang: ${currentLang})`);
          const alternatives = await getAvailableTimeSlots(
            restaurantId, flow.collectedInfo.date!, flow.collectedInfo.guests!,
            { maxResults: 3, lang: currentLang }
          );
          let alternativeMessageText = locale.bookingFailedOfferAlternatives;
          if (alternatives.length > 0) {
            const alternativesFormatted = alternatives.map((slot, index) => 
                `${index + 1}. ${slot.timeDisplay} - ${currentLang === 'ru' ? '–°—Ç–æ–ª–∏–∫' : 'Table'} ${slot.tableName}`
            ).join('\n');
            alternativeMessageText += locale.alternativesFound(alternativesFormatted) + locale.alternativesNumericalChoicePrompt;
          } else {
            alternativeMessageText += locale.noAlternativesTryAgain;
          }
          await bot.sendMessage(chatId, alternativeMessageText);
          // –ù–µ –æ—á–∏—â–∞–µ–º –¥–∏–∞–ª–æ–≥, –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
          return;
        }
      } catch (error) {
        console.error('‚ùå [Sofia AI] Error creating reservation:', error);
        await bot.sendMessage(chatId, locale.errorCreatingReservation);
        return;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ü–∏—Ñ—Ä—É)
    if (flow.stage === 'suggesting_alternatives' && /^[1-3]$/.test(text.trim())) {
      console.log(`üî¢ [Sofia AI] User selected alternative option: ${text} (lang: ${currentLang})`);
      try {
        const alternatives = await getAvailableTimeSlots(
          restaurantId, flow.collectedInfo.date!, flow.collectedInfo.guests!,
          { maxResults: 3, lang: currentLang }
        );
        const selectedIndex = parseInt(text.trim()) - 1;
        if (selectedIndex >= 0 && selectedIndex < alternatives.length) {
          const selectedSlot = alternatives[selectedIndex];
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ collectedInfo –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          (conversation.flow.collectedInfo as any).time = selectedSlot.time; 

          // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
          const bookingResult: CreateTelegramReservationResult = await createTelegramReservation(
            restaurantId, flow.collectedInfo.date!, selectedSlot.time,
            flow.collectedInfo.guests!, flow.collectedInfo.name!,
            flow.collectedInfo.phone || `telegram_${chatId}`, chatId.toString(),
            flow.collectedInfo.special_requests, currentLang
            // confirmedName –∑–¥–µ—Å—å –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º, —Ç.–∫. –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º–µ–Ω —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω —Ä–∞–Ω–µ–µ, –µ—Å–ª–∏ –±—ã–ª
          );

          if (bookingResult.status === 'created' && bookingResult.success && bookingResult.reservation) {
            const confirmationMessage = generateTelegramConfirmationMessage(
                bookingResult.reservation, flow.collectedInfo.name!, bookingResult.table?.name,
                restaurantName, currentLang
            );
            await bot.sendMessage(chatId, confirmationMessage);
            activeConversations.delete(chatId);
            return;
          } else if (bookingResult.status === 'name_mismatch_clarification_needed' && bookingResult.nameConflict) {
            // –≠—Ç–æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–µ–Ω –∑–¥–µ—Å—å, –Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
            console.log(`[Sofia AI] Name mismatch during alternative selection for guest ${bookingResult.nameConflict.guestId}.`);
            conversation.setAwaitingNameChoice(bookingResult.nameConflict);
            const messageText = locale.nameClarificationPrompt(bookingResult.nameConflict.dbName, bookingResult.nameConflict.requestName);
            const inlineKeyboard = { inline_keyboard: [[{ text: locale.useNewNameButton(bookingResult.nameConflict.requestName), callback_data: `confirm_name:new:${bookingResult.nameConflict.telegramUserId}` },{ text: locale.useDbNameButton(bookingResult.nameConflict.dbName), callback_data: `confirm_name:db:${bookingResult.nameConflict.telegramUserId}` }]]};
            await bot.sendMessage(chatId, messageText, { reply_markup: inlineKeyboard });
            return;
          } else {
            await bot.sendMessage(chatId, bookingResult.message || locale.slotUnavailableAnymore);
            return;
          }
        }
      } catch (error) {
        console.error('‚ùå [Sofia AI] Error handling alternative selection:', error);
        await bot.sendMessage(chatId, locale.errorHandlingAlternative);
        return;
      }
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ConversationManager
    if (responseFromConversationManager) { // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        await bot.sendMessage(chatId, responseFromConversationManager);
        console.log(`‚úÖ [Sofia AI] Sent response from ConversationManager to ${chatId} (lang: ${currentLang})`);
    } else if (flow.stage !== 'awaiting_name_choice') { // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–∏
        console.log(`[Sofia AI] No explicit response generated by ConversationManager for chat ${chatId}, stage: ${flow.stage}`);
    }


  } catch (error) {
    console.error('‚ùå [Sofia AI] Error processing conversation:', error);
    const conv = activeConversations.get(chatId);
    const langForError = conv ? conv.getConversationFlow().currentLanguage : 'en';
    await bot.sendMessage(chatId, telegramLocaleStrings[langForError].genericError);
  }
}

function hasCompleteBookingInfo(info: ConversationFlow['collectedInfo']): boolean {
  return !!(info.date && info.time && info.guests && info.name && info.phone);
}

async function sendWelcomeMessage(bot: TelegramBot, chatId: number, restaurantName: string, lang: Language) {
  await bot.sendMessage(chatId, telegramLocaleStrings[lang].welcomeMessage(restaurantName));
}

export async function initializeTelegramBot(restaurantId: number): Promise<boolean> {
  try {
    const existingBot = activeBots.get(restaurantId);
    if (existingBot) {
      await existingBot.stopPolling({ cancel: true }).catch(e => console.warn(`Error stopping existing bot: ${e.message}`));
      activeBots.delete(restaurantId);
    }

    const settings = await storage.getIntegrationSettings(restaurantId, 'telegram');
    const restaurant = await storage.getRestaurant(restaurantId);

    if (!settings?.enabled || !settings?.token || !restaurant) {
      console.log(`‚ö†Ô∏è [Sofia AI] No bot token or restaurant data for restaurant ${restaurantId}. Bot not initialized.`);
      return false;
    }
    const actualRestaurantName = restaurant.name || (settings.settings?.language === 'ru' ? "–ù–∞—à –†–µ—Å—Ç–æ—Ä–∞–Ω" : "Our Restaurant");

    console.log(`üöÄ [Sofia AI] Initializing bot for restaurant ${restaurantId} (${actualRestaurantName})`);
    const token = settings.token;
    const bot = new TelegramBot(token, { polling: true });
    activeBots.set(restaurantId, bot);

    bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      activeConversations.delete(chatId);
      const userLang = msg.from?.language_code?.startsWith('ru') ? 'ru' : 'en';
      await sendWelcomeMessage(bot, chatId, actualRestaurantName, userLang);
    });

    bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;
      const conv = activeConversations.get(chatId);
      const lang = conv ? conv.getConversationFlow().currentLanguage : (msg.from?.language_code?.startsWith('ru') ? 'ru' : 'en');
      await bot.sendMessage(chatId, telegramLocaleStrings[lang].helpMessage, { parse_mode: 'Markdown' });
    });

    bot.onText(/\/cancel/, async (msg) => {
      const chatId = msg.chat.id;
      const conv = activeConversations.get(chatId);
      const lang = conv ? conv.getConversationFlow().currentLanguage : (msg.from?.language_code?.startsWith('ru') ? 'ru' : 'en');
      activeConversations.delete(chatId);
      await bot.sendMessage(chatId, telegramLocaleStrings[lang].cancelMessage);
    });

    bot.on('message', async (msg) => {
      if (msg.text && msg.text.startsWith('/')) return;
      if (msg.text && msg.chat.id) {
        await handleMessage(bot, restaurantId, msg.chat.id, msg.text, restaurant);
      }
    });

    bot.on('callback_query', async (callbackQuery) => {
      const chatId = callbackQuery.message?.chat.id;
      const messageId = callbackQuery.message?.message_id;
      const data = callbackQuery.data;
      const conversation = chatId ? activeConversations.get(chatId) : undefined;

      if (!chatId || !messageId || !data || !conversation) {
        console.warn('[Telegram] Invalid callback_query or no active conversation for callback.');
        if (callbackQuery.id) await bot.answerCallbackQuery(callbackQuery.id);
        return;
      }

      const currentLang = conversation.getConversationFlow().currentLanguage;
      const locale = telegramLocaleStrings[currentLang];

      console.log(`[Telegram] Callback query received: ${data} from chat ${chatId}`);

      if (data.startsWith('confirm_name:')) {
        const currentFlow = conversation.getConversationFlow();
        if (currentFlow.stage !== 'awaiting_name_choice' || !currentFlow.nameConflictDetails) {
            console.warn(`[Telegram] Received name confirmation callback but not in correct stage or no conflict details. Stage: ${currentFlow.stage}`);
            await bot.answerCallbackQuery(callbackQuery.id, { text: "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ."});
            return;
        }

        const parts = data.split(':'); 
        const choiceType = parts[1]; 
        // const telegramUserIdFromCb = parts[2]; // –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –¥–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∏

        const conflictDetails = currentFlow.nameConflictDetails;
        if(!conflictDetails) { 
            console.error("[Telegram] Critical: nameConflictDetails is undefined in awaiting_name_choice stage.");
            await bot.answerCallbackQuery(callbackQuery.id, { text: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."});
            conversation.clearNameChoiceState();
            return;
        }

        const confirmedName = choiceType === 'new' ? conflictDetails.requestName : conflictDetails.dbName;
        const nameForThisBooking = conflictDetails.requestName; // –ò–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–≤–µ–ª –¥–ª—è —ç—Ç–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

        console.log(`[Telegram] User chose to use name: ${confirmedName} for profile. Name for this booking attempt: ${nameForThisBooking}`);

        try {
            await bot.answerCallbackQuery(callbackQuery.id, { text: locale.nameConfirmationUsed(confirmedName) });
            await bot.editMessageReplyMarkup({inline_keyboard: []}, { chat_id: chatId, message_id: messageId });
        } catch (editError) {
            console.warn(`[Telegram] Could not edit message or answer callback query: ${editError}`);
        }

        conversation.clearNameChoiceState(); 
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ collectedInfo
        (conversation.flow.collectedInfo as any).name = nameForThisBooking;

        try {
          const result = await createTelegramReservation(
            restaurantId, conflictDetails.date, conflictDetails.time,
            conflictDetails.guests, nameForThisBooking, 
            conflictDetails.phone, conflictDetails.telegramUserId, 
            conflictDetails.comments, conflictDetails.lang,
            confirmedName // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ –∏–º—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≥–æ—Å—Ç—è –≤ –ë–î
          );

          if (result.success && result.reservation) {
            const confirmationMessage = generateTelegramConfirmationMessage(
              result.reservation, nameForThisBooking, result.table?.name, 
              restaurant.name, currentLang
            );
            await bot.sendMessage(chatId, confirmationMessage);
            activeConversations.delete(chatId);
          } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç booking.ts (–æ–Ω–æ —É–∂–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
            await bot.sendMessage(chatId, result.message || locale.errorCreatingReservation);
          }
        } catch (error) {
          console.error('‚ùå [Sofia AI] Error re-creating reservation after name confirmation:', error);
          await bot.sendMessage(chatId, locale.errorCreatingReservation);
        }
      } else {
        await bot.answerCallbackQuery(callbackQuery.id); 
      }
    });


    bot.on('polling_error', (error) => console.error(`‚ùå [Sofia AI] Polling error for restaurant ${restaurantId}:`, error.message));
    bot.on('error', (error) => console.error(`‚ùå [Sofia AI] Bot error for restaurant ${restaurantId}:`, error.message));

    console.log(`‚úÖ [Sofia AI] Conversation bot initialized and listening for restaurant ${restaurantId}`);
    return true;
  } catch (error) {
    console.error(`‚ùå [Telegram] Failed to initialize bot for restaurant ${restaurantId}:`, error);
    return false;
  }
}

export function stopTelegramBot(restaurantId: number): void {
  const bot = activeBots.get(restaurantId);
  if (bot) {
    bot.stopPolling().catch(err => console.error(`Error stopping bot for restaurant ${restaurantId}:`, err));
    activeBots.delete(restaurantId);
    console.log(`üõë [Telegram] Bot stopped for restaurant ${restaurantId}`);
  }
}

export function getTelegramBot(restaurantId: number): TelegramBot | undefined {
  return activeBots.get(restaurantId);
}

export async function sendTelegramMessage(
  restaurantId: number,
  chatId: number,
  message: string
): Promise<boolean> {
  try {
    const bot = activeBots.get(restaurantId);
    if (!bot) {
      console.error(`‚ùå [Telegram] No bot found for restaurant ${restaurantId}`);
      return false;
    }
    await bot.sendMessage(chatId, message);
    return true;
  } catch (error) {
    console.error(`‚ùå [Telegram] Failed to send message:`, error);
    return false;
  }
}

export async function sendAvailabilityNotification(
  restaurantId: number,
  chatId: number,
  date: string,
  availableSlots: AvailabilitySlot[],
  lang: Language,
  formatter: DefaultResponseFormatter
): Promise<boolean> {
  try {
    const bot = activeBots.get(restaurantId);
    if (!bot) {
      console.error(`‚ùå [Telegram] No bot found for restaurant ${restaurantId}`);
      return false;
    }

    formatter.setLanguage(lang);
    const displayDate = formatter.formatDateForDisplay(date);

    let messageHeader = lang === 'ru'
      ? `üéâ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –Ø –Ω–∞—à–ª–∞ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ ${displayDate}:\n\n`
      : `üéâ Good news! I found availability for ${displayDate}:\n\n`;

    const slotLines = availableSlots.slice(0, 5).map((slot, index) => {
      const timeDisplay = formatter.formatTimeForDisplay(slot.time);
      const tableName = slot.tableName;
      return `${index + 1}. ${timeDisplay} - ${lang === 'ru' ? '–°—Ç–æ–ª–∏–∫' : 'Table'} ${tableName}`;
    }).join('\n');

    let messageFooter = lang === 'ru'
      ? `\n–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–æ–º–µ—Ä–æ–º! üéØ`
      : `\nWhich option interests you? Just reply with the number! ÔøΩ`;

    await bot.sendMessage(chatId, messageHeader + slotLines + messageFooter);
    return true;
  } catch (error) {
    console.error(`‚ùå [Telegram] Failed to send availability notification:`, error);
    return false;
  }
}

export async function setupTelegramBot(token?: string, restaurantId?: number): Promise<boolean> {
  if (token && restaurantId) {
    console.warn(`[Telegram] setupTelegramBot is deprecated. Use initializeTelegramBot directly or rely on initializeAllTelegramBots.`);
    const settings = await storage.getIntegrationSettings(restaurantId, 'telegram');
    if (!settings || settings.token !== token) {
        await storage.saveIntegrationSettings({
            restaurantId,
            type: 'telegram',
            token: token,
            enabled: true,
        });
    }
    return await initializeTelegramBot(restaurantId);
  }
  return false;
}

export async function initializeAllTelegramBots(): Promise<void> {
  try {
    const restaurantsWithTelegram = await storage.getRestaurantsWithTelegramEnabled();
    console.log(`[Telegram] Found ${restaurantsWithTelegram.length} restaurants with Telegram integration enabled.`);
    for (const restaurant of restaurantsWithTelegram) {
        if (restaurant.id) {
            await initializeTelegramBot(restaurant.id);
        }
    }
    console.log(`üåü [Sofia AI] All relevant restaurant bots initialized successfully.`);
  } catch (error) {
    console.error('‚ùå [Telegram] Failed to initialize all bots:', error);
  }
}

export function cleanupTelegramBots(): void {
  console.log(`üßπ [Telegram] Cleaning up ${activeBots.size} active bots...`);
  for (const [restaurantId, bot] of activeBots.entries()) {
    try {
      bot.stopPolling().catch(err => console.error(`Error stopping bot during cleanup for restaurant ${restaurantId}:`, err));
    } catch (error) {
      console.error(`‚ùå [Telegram] Error stopping bot for restaurant ${restaurantId}:`, error);
    }
  }
  activeBots.clear();
  activeConversations.clear();
  console.log(`‚úÖ [Telegram] Cleanup completed.`);
}

export function getConversationStats(): {
  activeConversations: number;
  activeBots: number;
  conversationsByStage: Record<string, number>;
} {
  const conversationsByStage: Record<string, number> = {};
  for (const conversation of activeConversations.values()) {
    const flow = conversation.getConversationFlow();
    conversationsByStage[flow.stage] = (conversationsByStage[flow.stage] || 0) + 1;
  }
  return {
    activeConversations: activeConversations.size,
    activeBots: activeBots.size,
    conversationsByStage
  };
}