# Reservation Creation Error - Debugging Task

## Error Analysis
**HTTP Status**: 400 Bad Request  
**Error Message**: `{"message": "\\n \"code\": \"invalid_type\",\\n \"expected\": \"number\",\\n \"received\": \"undefined\",\\n \"path\": [\\n \"guestId\"\\n ],\\n \"message\": \"Required\"\\n }"}`

## Error Interpretation
The error indicates a **validation failure** where:
- **Expected**: `number` (for guestId field)
- **Received**: `undefined` 
- **Issue**: The `guestId` field is required but not being provided or processed correctly

## Potential Root Causes to Investigate

### 1. **Frontend Form Data Issues**

#### 1.1 Form Data Submission Problems
- [ ] **Missing guestId in form submission**: Check if the form is sending guestId field
- [ ] **Frontend data transformation**: Verify how form data is being prepared before API call
- [ ] **Field mapping issues**: Confirm form field names match backend expectations
- [ ] **Data type conversion**: Check if guestId is being sent as string instead of number

#### 1.2 Guest Record Creation Logic
- [ ] **Guest creation workflow**: Verify if guest should be created before reservation
- [ ] **Guest lookup logic**: Check if system should find existing guest by phone number
- [ ] **Guest ID generation**: Confirm how guestId is supposed to be generated/obtained

### 2. **Backend API Validation Issues**

#### 2.1 Request Schema Validation
- [ ] **API endpoint validation**: Review reservation creation endpoint schema
- [ ] **Required field configuration**: Check if guestId is correctly marked as required
- [ ] **Validation library settings**: Verify validation framework configuration (Joi, Yup, etc.)
- [ ] **Request parsing**: Confirm API is correctly parsing incoming JSON data

#### 2.2 Guest Management Logic
- [ ] **Guest creation sequence**: Check if guest should be created automatically during reservation
- [ ] **Phone number uniqueness**: Verify guest lookup by phone number logic
- [ ] **Guest ID assignment**: Review how guestId gets assigned to new guests

### 3. **Database & Model Issues**

#### 3.1 Database Schema Problems
- [ ] **Guest table structure**: Verify Guest model has correct ID field configuration
- [ ] **Foreign key constraints**: Check Booking model's guestId foreign key setup
- [ ] **Auto-increment settings**: Confirm guest ID auto-generation is working
- [ ] **Database connection**: Verify database is accessible and responding

#### 3.2 ORM/Model Configuration
- [ ] **Model relationships**: Check Guest-Booking relationship configuration
- [ ] **Field definitions**: Verify model field types match database schema
- [ ] **Validation rules**: Review model-level validation settings
- [ ] **Default values**: Check if appropriate defaults are set for required fields

### 4. **Business Logic Flow Issues**

#### 4.1 Guest Creation Workflow
- [ ] **New guest detection**: How does system identify if guest is new or existing?
- [ ] **Guest record creation**: When should new guest record be created?
- [ ] **Guest ID retrieval**: How is existing guest ID retrieved for repeat customers?
- [ ] **Transaction handling**: Are guest creation and reservation creation in same transaction?

#### 4.2 Reservation Creation Process
- [ ] **Step sequence**: Verify correct order of operations (guest first, then reservation)
- [ ] **Error rollback**: Check if failed reservation rolls back guest creation
- [ ] **Concurrent request handling**: Verify handling of simultaneous reservations

### 5. **Data Flow Analysis**

#### 5.1 Frontend to Backend Flow
```
Form Data → API Request → Validation → Guest Lookup/Creation → Reservation Creation
```

**Investigation Points**:
- [ ] **Form data structure**: What data is being sent from frontend?
- [ ] **API request format**: Is request body properly formatted?
- [ ] **Guest handling logic**: How is guest data processed before reservation?
- [ ] **Response handling**: How are errors communicated back to frontend?

#### 5.2 Expected vs Actual Data Flow
- [ ] **Expected behavior**: Guest should be created/found automatically
- [ ] **Actual behavior**: guestId is missing/undefined in reservation request
- [ ] **Gap identification**: Where in the flow is guestId getting lost?

## Debugging Tasks

### Task 1: Frontend Data Investigation
**Objective**: Verify form data submission
- [ ] Inspect browser network tab during form submission
- [ ] Check JavaScript console for errors
- [ ] Verify all form fields are being collected
- [ ] Confirm API request payload structure
- [ ] Test with different browsers/devices

### Task 2: API Endpoint Analysis
**Objective**: Review reservation creation endpoint
- [ ] Check API endpoint definition and parameters
- [ ] Review request validation schema
- [ ] Test endpoint directly with API testing tool (Postman, curl)
- [ ] Verify error handling and response format
- [ ] Check API documentation vs implementation

### Task 3: Database Model Review
**Objective**: Verify database and model configuration
- [ ] Check Guest model definition and fields
- [ ] Verify Booking model and foreign key relationships
- [ ] Test guest creation functionality separately
- [ ] Check database constraints and triggers
- [ ] Verify ORM relationship configuration

### Task 4: Business Logic Flow Testing
**Objective**: Test complete reservation workflow
- [ ] Test with existing guest (should find by phone)
- [ ] Test with new guest (should create new record)
- [ ] Test edge cases (duplicate phone, invalid data)
- [ ] Verify transaction rollback behavior
- [ ] Test concurrent reservation scenarios

### Task 5: Integration Testing
**Objective**: End-to-end workflow verification
- [ ] Test complete user journey from form to database
- [ ] Verify data consistency across all tables
- [ ] Test error scenarios and recovery
- [ ] Check logging and monitoring for insights
- [ ] Validate user feedback and error messages

## Debugging Tools & Commands

### Browser Developer Tools
- **Network Tab**: Check API request payload and response
- **Console Tab**: Look for JavaScript errors
- **Application Tab**: Check local storage and session data

### Backend Debugging
- **API Logs**: Review server logs for request processing details
- **Database Logs**: Check for SQL errors or constraint violations
- **Application Logs**: Look for business logic errors or warnings

### Testing Commands
```bash
# Test API endpoint directly
curl -X POST http://localhost:5000/api/reservations \
  -H "Content-Type: application/json" \
  -d '{"guestName":"Pavel","phoneNumber":"+79557877777",...}'

# Check database state
SELECT * FROM guests WHERE phone = '+79557877777';
SELECT * FROM bookings ORDER BY created_at DESC LIMIT 5;
```

## Expected Solutions

### Most Likely Fixes:
1. **Frontend**: Ensure guest creation happens before reservation submission
2. **Backend**: Implement automatic guest lookup/creation in reservation endpoint
3. **Validation**: Adjust validation schema to handle guest creation workflow
4. **Database**: Fix any foreign key or constraint issues

### Workflow Corrections:
1. **Option A**: Create guest record first, then use guestId for reservation
2. **Option B**: Handle guest creation automatically within reservation creation
3. **Option C**: Modify validation to accept phone number and create guest internally

## Success Criteria
- [ ] Reservation creation works without guestId errors
- [ ] Guest records are created/found automatically
- [ ] Form submission completes successfully
- [ ] Database maintains data integrity
- [ ] Error messages are user-friendly and actionable

## Testing Checklist
After implementing fixes:
- [ ] Test with new guest information
- [ ] Test with existing guest (same phone number)
- [ ] Test form validation with missing/invalid data
- [ ] Test error handling and user feedback
- [ ] Verify database consistency and relationships
- [ ] Test on different browsers and devices

This systematic approach should identify and resolve the reservation creation error.